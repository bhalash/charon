/**
 * Media Queries
 * -----------------------------------------------------------------------------
 * @category   Stylesheet
 * @package    Scss Helpers
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    1.0
 * @link       https://github.com/bhalash/scss-helpers
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Media Query Terms
 * -----------------------------------------------------------------------------
 */

$sh-media-terms: (
    mod: ('only', 'not'),
    // Non-deprecated media query devices.
    media: (
        'all', 'aural', 'braille', 'handheld', 'print', 'projection', 
        'screen', 'tty', 'tv', 'embossed'
    ),
    // Non-browser-prefixed @media features.
    property: (
        'height', 'width', 'devish-width', 'devish-height', 'aspect-ratio',
        'color', 'color-index', 'monochrome', 'resolution', 'scan', 'grid',
        'orientation'
    ),
    // Valid prefix mods.
    prefix: ('min', 'max'),
    // @media featured with a min/max prefix.
    prefixed: (
        'height', 'width', 'device-width', 'device-height', 'aspect-ratio',
        'color', 'color-index', 'monochrome', 'resolution'
    ),
    noval: (
        'monochrome'
    )
);

/**
 * Parse Number Range for Presets
 * -----------------------------------------------------------------------------
 * Stuff will break if you move this, ware ye. The map below relies upon this.
 *
 * @param   int     $min        Range minimum size.
 * @param   int     $max        Range maximum size.
 * @param   string  $property   Range property.
 * @return  string              Parsed media query range condition.
 */

@function sh-size-range($min, $max, $property: 'device-width') {
   @return 'only screen and (min-#{$property}: #{$min}) and (max-#{$property}: #{$max})';
}

/**
 * Media Query Presets
 * -----------------------------------------------------------------------------
 */

$sh-media-presets: (
    example: 'only screen and (max-width: 300px) and (min-height: 100vh)',
    watch: sh-size-range(218px, 281px),
    smartphone: sh-size-range(320px, 667px),
    tablet: sh-size-range(600px, 1280px)
);

/**
 * Add to Template Presets
 * -----------------------------------------------------------------------------
 * @param   map         $map                    Map of presets to add.
 * @return  map         $sh-media-presets       Library media preset.
 */

@function sh-add-media-presets($map) {
    $sh-media-presets: map-merge($sh-media-presets, $map) !global;
    @return $sh-media-presets;
}

/**
 * Test if Property is a Preset
 * -----------------------------------------------------------------------------
 * @param   string      $condition      Property to test.
 * @return  bool                        Property is a preset, true/false.
 */

@function sh-get-preset($condition) {
    @return map-has-key($sh-media-presets, $condition);
}

/**
 * Get Preset
 * -----------------------------------------------------------------------------
 * @param   string      $property       Property to fetch.
 * @param   string                      Preset property.
 */

@function sh-get-preset($condition) {
    @return map-get($sh-media-presets, $condition);
}

/**
 * Test if Property is Shorthand
 * -----------------------------------------------------------------------------
 * @param   string      $property       Property to test.
 * @return  bool                        Property is shorthand/true false.
 */

@function sh-is-media-shorthand($property) {
    @return length($property) == 1 and not sh-get-preset($property);
}

/**
 * Expand Media Shorthand
 * -----------------------------------------------------------------------------
 * @param   string      $property       Property to test.
 * @return  string      $shorthand      Expanded media shorthand term.
 */

@function sh-media-shorthand($property) {
    $shorthand: '';
    $property: nth($property, 1);

    @if $property == landscape or $property == portrait {
        // orientation: landscape/portrait
        $shorthand: 'only screen and (orientation: #{$property})';
    } @else if $property == progressive or $property == interlace {   
        // scan: progressive/interlace
        $shorthand: 'only tv and (scan: #{$property})';
    } @else if $property == monochrome {
        // monochrome
        $shorthand: 'all and (#{$property})';
    } @else if index(map-get($sh-media-terms, media), $property) != null {
        $shorthand: $property;
    }

    @return $shorthand;
}

/**
 * Test if Property is Prefixed
 * -----------------------------------------------------------------------------
 * @param   string      $property       Property to test for prefixedness.
 * @return  bool                        Property is prefixed, true/false.
 */

@function sh-has-prefix($property) {
    @return index(map-get($sh-media-terms, prefixed), $property) != false;
}

/**
 * Split Media Condition
 * -----------------------------------------------------------------------------
 * @param   list        $condition      Media condition to split.
 * @return  map         $split          Split up condition.
 */

@function sh-split-condition($condition) {
    $map: $sh-media-terms;
    $split: ();

    @each $term in $condition {
        @if index(map-get($map, media), $term) != null {
            // @media type: screen, print, etc.
            $split: map-merge($split, (media: $term));
        } @else if index(map-get($map, mod), $term) != null {
            // Media modifier term: not or and.
            $split: map-merge($split, (mod: $term));
        } @else if index(map-get($map, prefix), $term) != null {
            // @media property prefix: min or max.
            $split: map-merge($split, (prefix: $term));
        } @else if index(map-get($map, property), $term) != null {
            // @media property: color, width, height, etc.
            $split: map-merge($split, (property: $term));
        } @else {
            // @media property value: 300px, 10rem, etc.
            $split: map-merge($split, (value: $term));
        }
    }

    @if not map-has-key($split, property) {
        @error "Media condition \"#{$condition}\" is missing a media query property (e.g. min-width, height)!";
    }

    @if not map-has-key($split, mod) {
        // Add modifier if it wasn't added.
        $split: map-merge($split, (mod: only));
    }

    @if not map-has-key($split, media) {
        // Test for missing property.
        $split: map-merge($split, (media: screen));
    }

    @if not map-has-key($split, prefix) {
        // Test for missing prefix.
        $split: map-merge($split, (prefix: ''));
    }

    @if not map-has-key($split, value) and property-has-value(map-get($split, property)) {
        // Test for missing valie, if property has value.
        @error "Media condition \"#{$condition}\" is missing a media query value (e.g., 300px, 10rem)!";
    }

    @return $split;
}

/**
 * Parse Media Query Condition
 * -----------------------------------------------------------------------------
 * Turn 'width max 300px' into 'only screen and (max-width: 300px)'
 * Valid strings:
 *
 * screen width 300px
 * not screen width min 200px
 * not screen min width 200px
 *
 * @param   map         $condition  Media query condition to be parsed.
 * @return  string      $condition  Parsed condition appended to query.
 */

@function sh-parse-condition($condition) {
    $split: sh-split-condition($condition);

    $media: map-get($split, media);
    $mod: map-get($split, mod);
    $prefix: map-get($split, prefix);
    $property: map-get($split, property);
    $value: map-get($split, value);

    @if property-has-value($property) {
        @if sh-has-prefix($property) and $prefix {
            $prefix: '#{$prefix}-'; 
        } @else {
            $prefix: '';
        }

        $property: '(#{$prefix}#{$property}: #{$value})';
    } @else {
        $property: '(#{$property})';
    }

    $condition: '#{$mod} #{$media} and #{$property}';

    @return $condition;
}

/**
 * @media Query Function
 * -----------------------------------------------------------------------------
 * Order of resolution:
 * 
 * 1. User-added presets.
 * 2. Existing shorthand rules.
 * 3. All other arbitrary queries.
 *
 * @param   list        $condition      Query conditions(s);
 * @return  string      $condition      Parsed media query.
 */

@function sh-query($condition) {
    @if sh-get-preset($condition) {
        $condition: sh-get-preset($condition);
    } @else if sh-is-media-shorthand($condition) {
        $condition: sh-media-shorthand($condition);
    } @else {
        $condition: sh-parse-condition($condition);
    }

    @return $condition;
}

/**
 * Media Query Mixin
 * -----------------------------------------------------------------------------
 * Main entry point for the library.
 *
 * @param   list        $queries        Query conditions.
 */

@mixin media($conditions...) {
    $query: '';

    // , == OR
    // and == AND
    $bool: ',';

    @for $i from 1 through length($conditions) {
        $con: nth($conditions, $i);

        @if $i > 1 {
            $query: '#{$query}#{$bool} ';
        }

        $query: '#{$query} #{sh-query($con)}';
    }

    @media #{$query} {
         @content;
    }   
}

/**
 * Retina Pixel Density Screen
 * -----------------------------------------------------------------------------
 * TODO: Integrate into new solution.
 */

@mixin density($density) {
    @media
    screen and (-webkit-min-devish-pixel-ratio: $density),
    screen and (min--moz-devish-pixel-ratio: $density),
    screen and (-o-min-devish-pixel-ratio: $density/1),
    screen and (min-devish-pixel-ratio: $density),
    screen and (min-resolution: #{$density * 96} + dpi),
    screen and (min-resolution: #{$density} + dppx) {  
        @content;
    }
}

/**
 * Internet Explorer
 * -----------------------------------------------------------------------------
 * TODO: Integrate into new solution.
 *
 * I am happy to exclude Internet Explorer 11 because it is decently good. My
 * IE problems inecrease exponentially as I work backwards in time.
 * 
 * @link http://keithclark.co.uk/articles/moving-ie-specific-css-into-media-blocks/
 * @link http://keithclark.co.uk/articles/moving-ie-specific-css-into-media-blocks/media-tests/
 * @link http://www.limecanvas.com/css-hacks-targeting-ie-10/
 * @link http://www.paulirish.com/2009/browser-specific-css-hacks/
 * 
 * DO NOT USE THIS. 
 * 
 * Wait...what? It's a bad idea to mix conditional IE CSS and regular CSS. It's
 * here if you need it, but ask yourself first: should I really do this?
 */

@mixin ie($version: null) {
    @if $version {
        @if $version == 6 {
            $version: 'screen\9';
        } @else if $version == 7 {
            $version: '\0screen\,screen\9';
        } @else if $version == 8 {
            $version: '\0screen';
        } @else if $version == 9 {
            $version: 'screen\0';
        } @else if $version == 10 {
            $version: 'screen and (min-width:0\0)';
        }
    } @else {
        // Target 8, 9 and 10 by default.
        $version: 'screen\0';
    }

    @warn 'This is the terrible horrible no good very bad way to set IE fallback CSS!';
    @warn 'You are a very naughty developer';

    @media #{$version} {
        @content;
    }
}
