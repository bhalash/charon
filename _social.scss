/**
 * Vector Spritesheet Management
 * -----------------------------------------------------------------------------
 * @category   Stylesheet
 * @package    Charon
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    2.0.1
 * @link       https://github.com/bhalash/charon
 */

/**
 * Default Vector Stylesheet
 * -----------------------------------------------------------------------------
 * Gaps separate rows. Currently 6 columns by 4 rows in size.
 */

$social-sprites: add-spritesheet(social, (
    path: 'vectors/button-sprites.svg',
    dimensions: (6, 4),
    sprites: (
        beard: (0, 0, #343537),
        discuss: (1, 0, #b9dfbc),
        email: (2, 0, #f5756c),
        facebook: (3, 0, #3B5998),
        flickr: (4, 0, #ff0084),
        github: (5, 0, #666666),
        google: (0, 1, #dd4b39),
        instagram: (1, 1, #3f729b),
        linkedin: (2, 1, #0976b4),
        pinterest: (3, 1, #cc2127),
        print: (4, 1, #007aaf),
        reddit: (5, 1, #ff5700),
        rss: (0, 2, #ff6600),
        search: (1, 2, #343537),
        share: (2, 2, #343537),
        tumblr: (3, 2, #35465c),
        twitter: (4, 2, #55acee),
        youtube: (5, 2, #b31217),
        menu: (0, 3, #343537),
        close: (1, 3, #343537)
    )
)) !default;

/**
 * Get Social Network Colour
 * -----------------------------------------------------------------------------
 * @param   string      $network        Social network.
 * @return  string                      Network colour.
 */

@function social-color($network) {
    @return nth(get-sprite(social, $network), 3);
}

/**
 * Social Images and Colours
 * -----------------------------------------------------------------------------
 * I wanted to reduce the work (and load time) of ubiqui-cancerous social
 * icons. This mixin generates uses an SVG spritemap with PNG fallback to
 * generate social icons for popular networks. Have a look at _defaults.scss to
 * see the list of currently supported services, as well as the format used.
 *
 * I have included black and white minimal icons; the background colours of the
 * element will be that for the relevant network.
 *
 * On $selector: There were some cases where I want the social style
 * to be attached to the parent, and on other occasions to an arbitrary child
 * instead.
 *
 * If $selector for the background image exists, it is attached to selector,
 * elsewise to the parent.
 *
 * @param   map         $size           Sizes for square-flex().
 * @param   string      $selector       Optional selector.
 * @param   bool        $split          Seperate icon colour from icon.
 * @param   map         $networks       Social networks to output.
 */

@mixin social($size: null, $selector: null, $split: false, $networks: null) {
    @if not $networks {
        // If no network was passed, default to all sprite icons.
        $networks: ();

        @each $key, $value in spritesheet(sprite, social) {
            $networks: append($networks, $key);
        }
    }

    // Parse selector, if any.
    $selector: if($selector, ' ' + $selector, $selector);

    &#{$selector} {
        @if $size {
            @include square-flex($size);
        }
    }

    @each $network in $networks {
        // Iterate, one class per nework.
        $colour: social-color($network);

        @if $split {
            &.#{$network} {
                background-color: $colour;
            }
        }

        &.#{$network}#{$selector} {
            background: sprite(social, $network);

            @if not $split {
                background-color: $colour;
            }

            @content;
        }
    }
}
