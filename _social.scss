/**
 * Default Vector Stylesheet
 * -----------------------------------------------------------------------------
 * Gaps separate rows. Currently 6 columns by 4 rows in size.
 */

$helper-path: '' !default;

$social-sprites: (
    variants: (
        dark: #{$helper-path + 'scss-helpers/assets/svg/button-sprites-black.svg'},
        light: #{$helper-path + 'scss-helpers/assets/svg/button-sprites-white.svg'}
    ),
    dimensions: (6, 4),
    sprites: (
        beard: (#343537, 0, 0),
        discuss: (#b9dfbc, 20%, 0),
        email: (#f5756c, 40%, 0),
        facebook: (#3B5998, 60%, 0),
        flickr: (#ff0084, 80%, 0),
        github: (#666666, 100%, 0),
        google: (#dd4b39, 0, 33.33%),
        instagram: (#3f729b, 20%, 33.33%),
        linkedin: (#0976b4, 40%, 33.33%),
        pinterest: (#cc2127, 60%, 33.33%),
        print: (#007aaf, 80%, 33.33%),
        reddit: (#ff5700, 100%, 33.33%),
        rss: (#ff6600, 0, 66.6%),
        search: (#000000, 20%, 66.6%),
        share: (#000000, 40%, 66.6%),
        tumblr: (#35465c, 60%, 66.6%),
        twitter: (#55acee, 80%, 66.6%),
        youtube: (#b31217, 100%, 66.6%),
        menu: (#000000, 0, 100%),
        close: (#000000, 20%, 100%)
    ),
) !default;

/**
 * Get Spritesheet Assets Variant
 * -----------------------------------------------------------------------------
 * @param   list        $variant        SVG map variant to use. 
 * @param   map         $map            Map to use.
 * @return  string      Selected vector spritemap.
 */

@function get-variant($variant: light, $map: $social-sprites) {
    @return map-get(map-get($map, variants), $variant);
}

/**
 * Get Sprite form Spritesheet
 * -----------------------------------------------------------------------------
 * @param   list        $network        Network sprite.
 * @param   map         $map            Map to use.
 * @return  list        $sprite         Selected sprite information. 
 */

@function get-sprite($network: null, $map: $social-sprites) {
    $sprite: (map-get(map-get($map, sprites), $network));

    $sprite: (
        colour: nth($sprite, 1),
        x: nth($sprite, 2),
        y: nth($sprite, 3)
    );

    @return $sprite;
}

/**
 * Get List of Networks from Spritesheet
 * -----------------------------------------------------------------------------
 * If no network was provided, output all networks. 
 * 
 * @param   list        $networks       Input list of networks.
 * @param   map         $map            Map to use.
 * @return  list        $networks       Output list of networks.
 */

@function get-networks($networks: null, $map: $social-sprites) {
    @if not $networks {
        $networks: ();

        $map: map-get($map, sprites);

        @each $service, $col in $map {
            $service: inspect($service);
            $networks: append($networks, inspect($service));
        }
    }

    @return $networks;
}

/**
 * Get Element Background Size
 * -----------------------------------------------------------------------------
 * Width: Element percentage width * number of rows in spritesheet.
 * Height: Element percentage width * number of columns in spritesheet.
 * 
 * @param   string      $axis           Background size axix (x or y).
 * @param   list        $size           Element size.
 * @param   map         $map            Map to use.
 * return   map         $dimensions     Calculated background size.
 */

@function get-dimensions($axis: null, $map: $social-sprites) {
    $dimensions: map-get($map, dimensions);

    $dimensions: (
        x: percentage(nth($dimensions, 1)),
        y: percentage(nth($dimensions, 2))
    );

    @if $axis and map-has-key($dimensions, $axis) {
        $dimensions: map-get($dimensions, $axis);
    }

    @return $dimensions;
}

/**
 * Social Images and Colours
 * -----------------------------------------------------------------------------
 * I wanted to reduce the work (and load time) of ubiqui-cancerous social 
 * icons. This mixin generates uses an SVG spritemap with PNG fallback to 
 * generate social icons for popular networks. Have a look at _defaults.scss to
 * see the list of currently supported services, as well as the format used. 
 * 
 * I have included black and white minimal icons; the background colours of the
 * element will be that for the relevant network.
 * 
 * @param   map     $size           Sizes for square-flex(). 
 * @param   string  $selector       Optional selector.
 * @param   map     $service(s)     Service(s) to be selectively output.
 * @param   map     $sprites        Map with information for spritesheet. 
 * 
 * On $selector: There were some cases where I want the social style 
 * to be attached to the parent, and on other occasions to an arbitrary child 
 * instead. 
 * 
 * If $selector for the background image exists, it is attached to selector,
 * elsewise to the parent.
 */

@mixin social($size: null, $selector: null, $networks: null, $variant: light) {
    $networks: get-networks($networks);
    $spritesheet: get-variant($variant);

    // x and y size, in percentages, of the background image.
    $x: get-dimensions(x);
    $y: get-dimensions(y);

    // Parse selector, if any.
    $selector: if($selector, ' ' + $selector, $selector);

    /**
     * Output CSS begins.
     */

    &#{$selector} {
        background: center/$x $y no-repeat url(#{$spritesheet});

        @if $size {
            @include square-flex($size);
        }
    }

    @each $network in $networks {
        // Iterate, one class per nework.
        $sprite: get-sprite($network);

        $colour: map-get($sprite, colour);
        $position-x: map-get($sprite, x);
        $position-y: map-get($sprite, y);

        &.#{$network}#{$selector} {
            background-color: $colour;
            background-position: $position-x $position-y; 
            @content;
        }
    }
}
