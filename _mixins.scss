/**
 * Useful Sass Mixins
 * -----------------------------------------------------------------------------
 * @category   Stylesheet
 * @package    Scss Helpers
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    2.0
 * @link       https://github.com/bhalash/scss-helpers
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Margin and Padding
 * ------------------
 * These two don't do too much except make life easier: Set margin or padding as
 * a multiplier of the base margin and padding. 
 */

@function margin($multiplier: 1, $margin: $default-margin) {
    @return $margin * $multiplier;
}

@function padding($multiplier: 1, $padding: $default-padding) {
    @return $padding * $multiplier;
}

/**
 * Fetch from Color Palette
 * -----------------------------------------------------------------------------
 * See: http://erskinedesign.com/blog/friendlier-color-names-sass-maps/
 * 
 * In short, the post advocates a mapped palette of colors and tones using a 
 * set schema, and then using this function to return the colors. 
 *
 *      $_color-base-gray: rgb(229,231,234);
 * 
 *      $palettes: (
 *          purple: (
 *              base: rgb(42,40,80),
 *              light: rgb(51,46,140),
 *              dark: rgb(40,38,65)
 *             ),
 *          gray: (
 *              base: $_color-base-gray,
 *              light: lighten($_color-base-gray, 10%),
 *              dark: darken($_color-base-gray, 10%)
 *          )
 *      );
 *
 */

@function palette($color, $tone: 'base', $palette: $default-colors) {
    @return map-get(map-get($palette, $color), $tone);
}

/**
 * Vendor Property and Value Prefixes
 * -----------------------------------------------------------------------------
 * Automatically vendor prefixes to CSS properties and values.
 * For the most part I only need to prefix for webkit, so that is the default
 * set.
 */

@mixin prefix($property, $value, $prefixes: webkit) {
    @each $prefix in $prefixes {
        #{'-' + $prefix + '-' + $property}: $value;
    }

    #{$property}: #{$value};
}

@mixin prefix-value($property, $value, $prefixes: webkit) {
    @each $prefix in $prefixes {
        #{$property}: #{'-' + $prefix + '-' + $value};
    }

    #{$property}: #{$value};
}

/**
 * Font Sizes and Line Heights
 * -----------------------------------------------------------------------------
 * See: http://snook.ca/archives/html_and_css/font-size-with-rem 
 * 
 * You will see decidedly odd results from using this mixin if the font-size of 
 * the <html> element isn't set to 100%. Ware ye!
 * 
 * In the linked article, the author gives the body a 65.5% font-size for rem 
 * units, but in reality most CSS reset files start with a 100% font-size. 
 * Because of this I instead multiply the given rem unit by 0.625 to reach the
 * same result.
 */

@mixin rem($property, $size: 1, $rem-multiplier: $default-rem-multiplier, $px-multiplier: $default-px-multiplier) {
    #{$property}: #{$size * $px-multiplier}px;
    #{$property}: #{$size * $rem-multiplier}rem;
}

@mixin font-size($size: 1) {
    @include rem(font-size, $size);
}

@mixin line-height($size: 1) {
    @include rem(line-height, $size);
}

/**
 * Social Images and Colours
 * -----------------------------------------------------------------------------
 * I wanted to reduce the work (and load time) of ubiqui-cancerous social 
 * icons. So:
 * 
 * 1. This uses a SVG spritesheet and is tuned to interact with it.
 * 2. If you ever alter the spritesheet then you will also need to alter
 *    the given background-positon rules in the array.
 * 2. Size can be arbitrary and defaults to:
 *          a. Width equal to 100% of parent width.
 *          b. Height equal to 100% of parent height.
 * 3. Any given pixel size is treated identically-square.
 * 4. If you need finer control anyhing, add it as content.
 * 
 * You can find the connected SVG spritesheet on GitHub at he following
 * URL: https://gist.github.com/bhalash/6bad337ac7445054d3a9#file-gistfile2-svg
 * 
 * Feel free to create and use your own spritesheet using the map below as a 
 * template! :)
 */

@mixin generate-social-link($element, $size: $default-button-size, $service: null, $spritesheet: $default-spritesheet) {
    /* Element can be a class, ID, element-whatever. #foo, .a or baz, or a[href^=fizz]
     * are all perfectly acceptable. */

    // Path to sprtesheet.
    $url: nth(map-get($spritesheet, sprites), 1);
    // Columns/width.
    $columns: nth(map-get($spritesheet, sprites), 2);
    // Rows/height.
    $rows: nth(map-get($spritesheet, sprites), 3);
    // Positional information.
    $networks: map-get($spritesheet, positions);
    // Pixel/percentage/rem/em/whatever size.
    $width: nth($size, 1);
    // Ratio of height to width. See square-flex().
    $ratio: nth($size, 2);

    #{$element} {
        // Vector spritesheet is background-image.
        background-image: url($url);
        /* Final icon is square. background-image size is:
         * width: icon size * number of rows in spritesheet
         * height: icon size * number of columns in spritesheet */
        background-size: #{$width * $columns} #{$width * $rows};
        background-repeat: no-repeat;
        display: block;
        @include square-flex($width $ratio);
        @content;
    }

    @if ($service) {
        // If you supply a service, just output link for that.
        $color: nth(map-get($networks, $service), 1);
        $position-x: nth(map-get($networks, $service), 2);
        $position-y: nth(map-get($networks, $service), 3);

        #{$element}.#{$service} {
            background-color: $color;
            background-position: $position-x $position-y;
        }
    } @else {
        // Else iterate map-list to produce social links.
        @each $map, $network in $networks {
            $color: nth($network, 1);
            $position-x: nth($network, 2);
            $position-y: nth($network, 3);

            #{$element}.#{$map} {
                background-color: $color;
                background-position:  $position-x $position-y;
            }
        }
    }
}

/**
 * Flexbox
 * -----------------------------------------------------------------------------
 * See https://css-tricks.com/snippets/css/a-guide-to-flexbox/ for a primer on
 * CSS flexbox. If you have come this far you should have an understanding of
 * how, why and where you would use flexbox.
 * 
 * These two mixins generate rules for parent and child elements respectively.
 * By default, the parent will be a row and the child will have a flex value of 
 * 1.
 * 
 * As of April 2015 cross-browser support for flexbox isn't complete; there are
 * major issues with vertical alignment in Internet Explorer and all versions
 * of Safari (desktop and mobile) require properfies and values to be prefixed
 * with -webkit-foo.
 */

@mixin flex-parent($direction: row, $justify-content: null, $wrap: null, $align-items: null) {
    // Generate flex parent rules.
    @include prefix-value(display, flex, webkit);
    @include prefix(flex-direction, $direction, webkit);

    @if ($justify-content) {
        @include prefix(justify-content, $justify-content, webkit);
    }

    @if ($wrap) {
        @include prefix(flex-wrap, $wrap, webkit);
    }

    @if ($align-items) {
        @include prefix(align-items, $align-items, webkit);
    }
}

@mixin flex-child($flex: 1, $align-self: null, $order: null) {
    // Generate flex children rules.
    @include prefix(flex, $flex, webkit);

    @if ($align-self) {
        @include prefix(align-self, $align-self, webkit);
    }

    @if ($order) {
        @include prefix(order, $order, webkit);
    }
}

/**
 * Flexible Square Boxes
 * -----------------------------------------------------------------------------
 * Generate a box whose height is equal to the given ratio of the width.
 * Width can be of any size.
 * Ratio should be between 0 and foo.
 * 
 * See: http://stackoverflow.com/a/13625843/1433400
 * See: http://alistapart.com/article/creating-intrinsic-ratios-for-video
 */

@mixin square-flex($default-button-size) {
    $width: nth($default-button-size, 1);
    $ratio: nth($default-button-size, 2);

    height: 0;
    padding-bottom: $width * $ratio;
    width: $width;
}
 
/**
 * Miscellaneous Mixins and Functions
 * -----------------------------------------------------------------------------
 */

@mixin vertical-center($amount) {
    // Useful for vertically centering elements.
    padding-bottom: $amount;
    padding-top: $amount;
}

@function rgba-opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    $red: 255 - $red;
    $green: 255 - $green;
    $blue: 255 - $blue;
    $alpha: 1 - $alpha;

    @return rgba($red, $green, $blue, $alpha);
}

@mixin columns($count, $gap) {
    @include prefix(column-count, $count);
    @include prefix(column-gap, $gap);
}

/**
 * Placeholder Styles
 * -----------------------------------------------------------------------------
 * Generate styles for input placeholders in Internet Explorer, Firefox and 
 * Webkit browsers. Use as follows:
 * 
 *      input {
 *          @include placeholder-style() {
 *              foo: bar;
 *          }
 *      }
 */

@mixin placeholder-style() {
    &::-webkit-input-placeholder {
       @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

/**
 * Background Coloured Mask
 * -----------------------------------------------------------------------------
 * Useful for when you have to layer text above a background image.
 */

@mixin mask($red: 255, $green: 255, $blue: 255, $opacity: 1) {
    background-color: rgba($red, $green, $blue, $opacity);
}

/**
 * @font-face Declaration
 * -----------------------------------------------------------------------------
 * There are a bunch of Sass/Scss @font-face mixins available on the Internet, 
 * but each of them is fundamentally inflexible. They variously:
 * 
 * 1. Require a fixed file path.
 * 2. Fixed existence of files, by which I mean each and every possible type of 
 *    file (eot, woff, etc).
 * 3. Fixed order of declaration.
 * 
 * With font-face, I hopefully have provided something a little bit more 
 * flexible: declare all of the attributes of your @font-face in a map, and then
 * call the font-face mixin.
 * 
 * Weight, stretch and style are all optional.
 *
 * Example map:
 *
 *      $open-sans: (
 *          family: 'font-name',
 *          folder: '/path/to/folder/',
 *          filename: 'FontName',
 *          types: ('ttf', 'woff', 'eot'),
 *          weight: 'normal',
 *          style: 'normal',
 *          stretch: 'condensed'
 *      );
 *
 * Then call with: 
 * 
 *      @include font-face($open-sans);
 */

@mixin font-face($font) { 
    $family: map-get($font, family);
    $folder: map-get($font, folder);
    $filename: map-get($font, filename);
    $types: map-get($font, types);
    $src: '';
    $i: 1;

    @font-face {
        font-family: $family;

        @each $type in $types {
            // Iterate to produce the path and type, and then set it.
            $path: $folder + $filename + '.' + $type; 
            $src: $src + 'url(' + $path + ') format("' + $type + '")';

            @if ($i < length($types)) {
                $src: $src + ', '; 
                $i: $i + 1;
            }
        }

        src: #{$src};

        // Optionally override CSS text defaults:

        @if (map-has-key($font, weight)) {
            font-weight: map-get($font, weight);    
        }

        @if (map-has-key($font, style)) {
            font-style: map-get($font, style);
        }

        @if (map-has-key($font, stretch)) {
            // Not supported anywhere. Ware ye.
            font-stretch: map-get($font, stretch);
        }

        @content;
    } 
}