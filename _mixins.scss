/**
 * Useful Sass Mixins
 * -----------------------------------------------------------------------------
 * @category   Stylesheet
 * @package    Scss Helpers
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    2.0
 * @link       https://github.com/bhalash/scss-helpers
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Fetch Named Asset
 * -----------------------------------------------------------------------------
 * $assets: (
 *      brand: (
 *          example: (
 *              black: $brands + 'example-black.svg',
 *              white: $brands + 'example-white.svg'
 *          ),
 *          foras: (
 *              black: 'foras-black.svg',
 *              white: 'foras-white.svg'
 *          ),
 *          greann: $brands + 'greann.svg'
 *      )
 *  );
 *
 * @param   string      $asset      Primary asset name.
 * @param   map         $secondary  Asset variant names.
 * @return  string      Returned image asset.
 * @link https://www.bhalash.com/archives/13544804892
 */

@function asset($asset, $variants: null) {
    $asset: map-get($assets, $asset);

    @if $variants {
        @each $variant in $variants {
            $asset: map-get($asset, $variant);
        }
    }

    @return url($asset);
}

/**
 * Prefix Attribute
 * -----------------------------------------------------------------------------
 * Automatically vendor prefixes to CSS properties. You should use autoprefixer! 
 * 
 * @param   string      $attribute       CSS attribute to be prefixed.
 * @param   string      $value           CSS value. 
 * @param   map         $prefixes        Map of prefixes to be applied.
 */

@mixin prefix($attribute, $value, $prefixes: webkit) {
    @each $prefix in $prefixes {
        #{'-' + $prefix + '-' + $attribute}: $value;
    }

    #{$attribute}: #{$value};
}

/**
 * Prefix Value
 * -----------------------------------------------------------------------------
 * Automatically vendor prefixes to CSS values. You should use autoprefixer! 
 * 
 * @param   string      $attribute       CSS attribute.
 * @param   string      $value           CSS value to be prefixed.
 * @param   map         $prefixes        Map of prefixes to be applied.
 */

@mixin prefix-value($attribute, $value, $prefixes: webkit) {
    @each $prefix in $prefixes {
        #{$attribute}: #{'-' + $prefix + '-' + $value};
    }

    #{$attribute}: #{$value};
}

/**
 * Section Interior Padding
 * -----------------------------------------------------------------------------
 * Responsive padding for sections without having to list it all by hand. 
 * $padding, $padding * 0.8, $padding * 0.6, etc...
 * 
 * @param   int     $padding            Initial padding value.
 * @param   map     $media              Map of responsive @media breakpoints.
 */

@mixin content-padding($padding, $media) {
    $padding-mod: 1; 

    padding-left: $padding;
    padding-right: $padding;

    @each $break in $media {
        @include media($break) {
            padding-left: $padding * $padding-mod;
            padding-right: $padding * $padding-mod;
        }

        $padding-mod: $padding-mod - 0.2;
    }

    @include media(smartphone) {
        padding-left: 0;
        padding-right: 0;
    }
}

/**
 *  Freeze Div Content
 * -----------------------------------------------------------------------------
 */

@mixin freeze {
    overflow: hidden;
    z-index: -1;
    @include fixed(0);
}
 
/**
 * Vertical Center
 * -----------------------------------------------------------------------------
 * @param   int     $amount         Amount of top and bottom padding.
 */

@mixin vertical-center($amount) {
    // Useful for vertically centering elements.
    padding-bottom: $amount;
    padding-top: $amount;
}

/**
 * Invert RGBA
 * -----------------------------------------------------------------------------
 * @param   int     $red            Red value. 
 * @param   int     $green          Green value.
 * @param   int     $blue           Blue value. 
 * @param   int     $alpha          Alpha value. 
 @ @return  map                     Inverted RGBA.
 */

@function rgba-opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    $red: 255 - $red;
    $green: 255 - $green;
    $blue: 255 - $blue;
    $alpha: 1 - $alpha;

    @return rgba($red, $green, $blue, $alpha);
}

/**
 * Placeholder Styles
 * -----------------------------------------------------------------------------
 * Generate styles for input placeholders in Internet Explorer, Firefox and 
 * Webkit browsers. Use as follows:
 * 
 *      input {
 *          @include placeholder-style() {
 *              foo: bar;
 *          }
 *      }
 */

@mixin placeholder-style {
    &::-webkit-input-placeholder {
       @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

/**
 * Background Coloured Mask
 * -----------------------------------------------------------------------------
 * Useful for when you have to layer text above a background image.
 */

%background-mask {
    position: relative;

    > * {
        /* Specific workaround for Mobile Safari: without this #interior content
         * will scroll behind the header. */
        -webkit-backface-visibility: hidden;
        // Child content must be raised owing to the background gradient.
        z-index: 2;
    }

    &:after {
        content: ' ';
        @include absolute(0);
    }
}

/**
 * Solid Background Mask
 * -----------------------------------------------------------------------------
 * @param   int     $red            Red value. 
 * @param   int     $green          Green value.
 * @param   int     $blue           Blue value. 
 * @param   int     $alpha          Alpha value. 
 */

@mixin solid-mask($red: 255, $green: 255, $blue: 255, $alpha: 1) {
    @extend %background-mask;

    &:after {
        background-color: rgba($red, $green, $blue, $alpha);
    }
}

/**
 * Column Count
 * -----------------------------------------------------------------------------
 */

@mixin column-count($count: 3, $gap: null, $rule: null) {
    column-count: $count;

    @if $gap {
        column-gap: $gap;
    }

    @if $rule {
        column-rule: $rule;
    }
}

/**
 * Modal Popover
 * -----------------------------------------------------------------------------
 */

@mixin pop-modal {
    display: none;
    @include fixed(0);

    &:target {
        display: block;
        outline: 0;
        z-index: 4;
    }
}

/**
 * Gradient Background Mask
 * -----------------------------------------------------------------------------
 * @param   map     $start          Gradient start point.
 * @param   map     $end            Gradient end point.
 */

@mixin gradient-mask ($start: rgba(0,0,0,0.75), $end: rgba(0,0,0,0.25)) {
    @extend %background-mask;

    &:after {
        background: linear-gradient(to bottom, $start 0%, $end 100%);
    }
}

/**
 * @font-face Declaration
 * -----------------------------------------------------------------------------
 * There are a bunch of Sass/Scss @font-face mixins available on the Internet, 
 * but each of them is fundamentally inflexible. They variously:
 * 
 * 1. Require a fixed file path.
 * 2. Fixed existence of files, by which I mean each and every possible type of 
 *    file (eot, woff, etc).
 * 3. Fixed order of declaration.
 * 
 * With font-face, I hopefully have provided something a little bit more 
 * flexible: declare all of the attributes of your @font-face in a map, and then
 * call the font-face mixin.
 * 
 * Weight, stretch and style are all optional.
 *
 * Example map:
 *
 *      $open-sans: (
 *          family: 'font-name',
 *          folder: '/path/to/folder/',
 *          filename: 'FontName',
 *          types: ('ttf', 'woff', 'eot'),
 *          // Below attributes are optional.
 *          weight: 'normal',
 *          style: 'normal',
 *          stretch: 'condensed'
 *      );
 *
 * Then call with: 
 * 
 *      @include font-face($open-sans);
 *
 * @param   map         $font           Map of typeface information.
 */

@mixin font-face($font) { 
    $family: map-get($font, family);
    $folder: map-get($font, folder);
    $filename: map-get($font, filename);
    $types: map-get($font, types);
    $src: ();

    @font-face {
        font-family: $family;

        @each $type in $types {
            // Iterate to produce the path and type, and then set it.
            $path: $folder + $filename + '.' + $type; 
            $src: append($src, 'url(' + $path + ') format("' + $type + '"),');
        }

        src: #{$src};

        // Optionally override CSS text defaults:

        @if map-has-key($font, weight) {
            font-weight: map-get($font, weight);    
        }

        @if map-has-key($font, style) {
            font-style: map-get($font, style);
        }

        @if map-has-key($font, stretch) {
            // Not supported anywhere. Ware ye.
            font-stretch: map-get($font, stretch);
        }

        @content;
    } 
}

