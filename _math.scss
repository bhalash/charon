/**
 * Sass Math Functions
 * -----------------------------------------------------------------------------
 * @category   Stylesheet
 * @package    Scss Helpers
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    1.0
 * @link       https://github.com/bhalash/scss-helpers
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Modular Scale Values
 * -----------------------------------------------------------------------------
 * Either increase (increment > 0) or decrease (increment <= 0) $base-size by
 * $ratio through the given number of $increment units.
 *
 * @link https://www.bhalash.com/archives/13544805638
 * @link http://www.modularscale.com/
 * @link http://sassmeister.com/gist/22918b6519a2f15354d0
 *
 * @param   number      $step               Ratio step to return.
 * @param   number      $base-size          Base size of unit to raise.
 * @param   number      $ratio              Ratio of increment/decrement.
 * @return  number      $size               Increment/decremented size.
 */

@function modular-scale($step, $base-size, $ratio) {
    @for $i from 1 through $step {
        @if $step > 0 {
            $base-size: $base-size * $ratio;
        } @else {
            $base-size: $base-size / $ratio;
        }
    }

    @return $base-size;
}

/**
 * Golden Ratio Modular Scale Step
 * -----------------------------------------------------------------------------
 * @param   number      $step               Ratio step to return.
 * @param   number      $base-size          Base size of unit to raise.
 * @return  number                          $step incremented per the GR.
 */

@function gstep($step, $base-size) {
    @return modular-scale($step, $base-size, 1.61803398875);
}

/**
 * Sqaure Root
 * -----------------------------------------------------------------------------
 * @link    http://www.antimath.info/css/sass-sqrt-function/
 * @param   number      $number
 * @return  number      $sqrt           Sqaure root of $number.
 */

@function sqrt($number) {
    $temp: 1;
    $sqrt: 1;

    @for $i from 1 through 10 {
        $sqrt: $temp - ($temp * $temp - abs($number)) / (2 * $temp);
        $temp: $sqrt;
    }

    @return $sqrt;
}

/**
 * Exponential Number
 * -----------------------------------------------------------------------------
 * Raise a number to a given power.
 *
 * @param   number      $number         Number to riase.
 * @param   nubmer      $power          Power to which it should be raised.
 * @return  number      $exponent       Number raised to exponent.
 */

@function power($number, $power) {
    $exponent: 1;

    @if $power > 0 {
        @for $i from 1 through $power {
            $exponent: $exponent * $number;
        }
    } @else if $power < 0 {
        @for $i from 1 through $power {
            $exponent: $exponent / $number;
        }
    }

    @return $exponent;
}

/**
 * Exponential Number
 * -----------------------------------------------------------------------------
 * Raise a number to an exponent of 10. So:
 *
 * raise(3,2) = 3 x 10^2 = 300
 * raise(4,1) = 4 x 10^1 = 40
 * raise(2.75,3) = 2.75 x 10*3 = 2750
 *
 * Sass only rounds to 5 digits of percision, so don't try to use the
 * gravitational constant as a font size. :)
 *
 * @param   number      $number         Number to riase.
 * @param   nubmer      $power          Power to which it should be raised.
 * @return  number      $exponent       Number raised to exponent.
 */

@function raise-ten($number, $power) {
    @return $number * power(10, $power);
}

/**
 * Square Number
 * -----------------------------------------------------------------------------
 * @param   number      $number
 * @return  number      $number         Number squared.
 */

@function square($number) {
    @return $number * $number;
}

/**
 * Hexagon Height
 * -----------------------------------------------------------------------------
 * Return the height of a hexagon from the length of one side. This is not
 * entirely precise because of Sass' rounding.
 *
 * @param   number      $side           Hexagon side.
 * @return  number      $number         Approximate height of the hexagon.
 */

@function hex-height($side) {
    @return $side * sqrt(3);
}

/**
 * Hexagon Width
 * -----------------------------------------------------------------------------
 * Return the width of a hexagon from the length of one side.
 *
 * @param   number      $side           Hexagon side.
 * @return  number      $number         Approximate height of the hexagon.
 */

@function hex-width($side) {
    @return $side * 2;
}

/**
 * Length of Hypotenuse of Pythagorean Triangle
 * -----------------------------------------------------------------------------
 * @param   number      $opposite       Opposite side of triangle.
 * @param   number      $adjacent       Adjacent side of a triangle.
 * @return  number                      Length of the hypotenuse;
 */

@function hypotenuse-length($opposite, $adjacent) {
    @return sqrt(square($opposite) + square($adjacent));
}

/**
 * Generate Hexagon Shape
 * -----------------------------------------------------------------------------
 * Width is input, height is calculated. It will be a little less than the
 * width. Inspired by the link below.
 *
 * This should work great back to ~IE9.
 *
 * @link    https://jtauber.github.io/articles/css-hexagon.html
 * @param   color/map       $colors     Colors to be used. Rest, hover and active.
 * @param   number          $width      Width of the hexagon.
 */

@mixin hexagon($colors, $size--width) {
    @if unit($size--width) == '%' {
        // CSS border elements may not use a percentage as its width unit.
        // Hexagon will be malformed if you use a percentage.
        // *Anything* else is acceptable.
        @warn "Percentage #{$ize--width} was used for hexagon width.";
        @warn "Hexagon will be malformed";
    }

    // Rest, hover, active.
    $color--rest: nth($colors, 1);

    // Any measurable unit but percentage is okay!
    $size--width: if(unitless($size--width), to-rem($size--width), $size--width);

    // Sides and height of the hexagon.
    $size--side: $size--width * 0.5;
    $size--height: hex-height($size--side);

    $border--height: $size--height * 0.5;
    $border--width: $size--side * 0.5;

    & {
        // Constrain the background color inside the padding.
        background-clip: content-box;
        display: inline-block;
        height: $size--height;
        padding: 0 $size--side * 0.5;
        position: relative;
        width: $size--side;

        // Center color.
        background-color: $color--rest;
        // :before and :after inherit this.
        border-color: $color--rest;

        &:before, &:after {
            border-color: transparent;
            border-style: solid;
            content: '';
            width: 0;
        }

        @if length($colors) >= 2 {
            $color--hover: nth($colors, 2);

            &:hover {
                background-color: $color--hover;
                border-color: $color--hover;
            }
        }

        @if length($colors) >= 3 {
            $color--active: nth($colors, 3);

            &:active {
                background-color: $color--active;
                border-color: $color--active;
            }
        }

        &:before {
            // Left.
            border-right-color: inherit;
            border-width: $border--height $border--width $border--height 0;
            @include absolute(0 auto 0 0);
        }

        &:after {
            // Right.
            border-left-color: inherit;
            border-width: $border--height 0 $border--height $border--width;
            @include absolute(0 0 0 auto);
        }
    }
}
