/// 
/// Symmetric Column Width
/// 
/// Determine the width of each column in a syemmetrical element.
/// 
/// @access private
/// @param {number} $columns - Number of columns.
/// @param {number} $gutter - Percentage space between columns.
/// @return {number} Calculated column width.
///

@function column-width($columns, $gutter) {
    $width: (100 - ($columns - 1) * $gutter) / $columns;

    @if not is-percent($width) {
        $width: percentage($width * 0.01);
    }

    @return $width;
}

/// 
/// Symmetric Column Margin
/// 
/// Determine the width of each column in a syemmetrical element.
/// 
/// @access private
/// @param {number} $gutter - Margin as a decimal or percentage.
/// @param {number} $gutter - Margin as a percentage.
///

@function column-gutter($gutter) {
    @if $gutter != 0 {
        @if $gutter != 0 and is-decimal($gutter) {
            $gutter: percentage(strip-unit($gutter) * 0.01);
        } @else if not is-percent($gutter) {
            @error "Margin should be supplied as a decimal or a percentage!";
        }
    }

    @return $gutter;
}

/// 
/// Asymmetric Column Width
/// 
/// Determine the width of "auto" columns in asyemmetrical element.
/// 
/// @access private
/// @param {list} $columns - List of columns.
/// @param {number} $gutter - Column gutter (to right or left)
/// @return {number} - Percentage width of "auto" columns.
///

@function odd-column-width($columns, $gutter) {
    $percent: 0;
    $autos: 0;

    @each $col in $columns {
        $percent: $percent + value-percent($col);

        @if is-keyword($col) {
            $autos: $autos + 1;
        }
    }

    @if $autos == 0 {
        // Division by zero is bad.
        $autos: 1;
    }

    /* Width for margin is subtracted from auto columns. In short:
     * % column total = % width + margin;
     * auto column total = % width - margin; */
    @return ((100 - $percent) / $autos) - (($gutter * (length($columns) - 1)) / $autos);
}

/// 
/// Get Opposite Float Side
/// 
/// Used in several places and surprisingly useful.
/// 
/// @access private
/// @param {string} $side - Float side;
/// @return {string} $opposite - Inverse of floated side;
///

@function opposite-side($side: left) {
    @return if($side == right, left, right);
}

/// 
///  Evaluate Whether Number is Column
/// 
/// If number is a percentage, return number, else return number 0.
/// 
/// @access private
/// @param {number} $value - Number to test.
/// @return {number} - Number/0.
///

@function value-percent($value) {
    @return if(is-percent($value), $value, 0);
}

/// 
/// Total Percentages in List
/// 
/// The {list} for asymmetric float columns has a mix of percentage and "auto"
/// sized columns. This tallies the percentage columns and returns whether they
/// exceed 100%.
/// 
/// @access private
/// @param {list} $columns - List of columns to evaluate.
/// @param {number} $target - Target percentage to check against.
/// @return {bool} Columns fit within $target, true/false.
///

@function list-greater-than($columns, $target: 100) {
    $percent: 0;

    @each $col in $columns {
        $percent: $percent + value-percent($col);
    }

    @return ($percent > $target);
}

/// 
/// Validate Asymmetric Mixin Vars
/// 
/// Validated paramaters passed for asymmetric columns.
/// 
/// @access private
/// @param {list} $columns - List of columns.
/// @return {list} $columns - List of columns, validated.
///

@function check-odd-columns($columns) {
    @if not is-list($columns) {
        @error "Asymmetrical columns should be supplied a list!";
    }

    @each $col in $columns {
        @if not is-percent($col) and not is-keyword($col) {
            // Check for appropraite units.
            @error "Supplied units should be either a percentage or 'auto!'";
        }
    }

    @if list-greater-than($columns, 100) {
        // Check for appropriate size.
        @error "Column percentages should total < 100%!";
    }

    @return $columns;
}

/// 
/// Validate Column Type
/// 
/// Column type must be either floatbox or flex. Throw error if any other param
/// is entered.
/// 
/// @access private
/// @param {string} $type - Type of columns.
/// @return {string} $type - Type of columns, validated.
///

@function column-type($type) {
    @if $type != 'float' and $type != 'flex' {
        @error "Type must be either 'float' or 'flex'!"
    }

    @return $type;
}

/// 
/// Set "Auto"-width Column Sizes
/// 
/// @access private
/// @param {list} $columns - List of columns.
/// @param {number} $gutter - Margin size.
/// @return {list} $columns - Set sizes for columns.
///

@function set-autocol-sizes($columns, $gutter) {
    $auto-width: odd-column-width($columns, $gutter);

    @for $i from 1 through length($columns) {
        @if is-keyword(nth($columns, $i), auto) {
            $columns: set-nth($columns, $i, $auto-width);
        }
    }

    @return $columns;
}

/// 
/// Remove Float
/// 
/// Absolutely, positively remove a float from an element and reset its width to
/// the default value. There are occasions, tied to scope, where you may have to
/// force this with !important.
/// 
/// @param {bool} $important - Mark clear as important.
///

@mixin nofloat($important: false) {
    float: none #{if($important, !important, '')};
    width: initial #{if($important, !important, '')};
    @content;
}

/// 
/// Symmetric, Even Flexbox or Floated Columns
/// 
/// @access public
/// @param {string} $type - Flexbox or float?
/// @param {string} $element - Target child element.
/// @param int/list $columns - Number of columns to produce.
/// @param {number} $gutter - Margin between columns.
/// @param {string} $side - Float side.
/// @param {string} $overflow - Overflow, hidden or auto?
///

@mixin columns($type: 'flex', $element: div, $columns: 3, $gutter: 0, $side: left, $overflow: auto) {
    // Validate column gutter.
    $gutter: column-gutter($gutter);
    $type: column-type($type);

    @if is-decimal($columns) and $columns > 0 {
        @include even-columns($type, $element, $columns, $gutter, $side, $overflow) {
            @content;
        }
    } @else if is-list($columns) {
        @include odd-columns($type, $element, $columns, $gutter, $side, $overflow) {
            @content;
        }
    } @else {
        @error "Columns should be either a {list} or a a number";
    }
}

/// 
/// Asymmetric columns.
/// 
/// @access private
///

@mixin even-columns($type, $element, $columns, $gutter, $side, $overflow) {
    $width: column-width($columns, $gutter);

    @if $type == 'flex' {
        @include even-flexbox($element, $columns, $gutter, $width) {
            @content;
        }
    }

    @if $type == 'float' {
        @include even-float($element, $columns, $gutter, $side, $width, $overflow) {
            @content;
        }
    }
}

/// 
/// Asymmetric columns.
/// 
/// @access private
///

@mixin odd-columns($type, $element, $columns, $gutter, $side, $overflow) {
    // Validate columns, if list.
    $columns: check-odd-columns($columns);

    @if $type == 'flex' {
        @include odd-flexbox($element, $columns, $gutter) {
            @content;
        }
    }

    @if $type == 'float' {
        @include odd-float($element, $columns, $gutter, $side, $overflow) {
            @content;
        }
    }
}

/// 
/// Flexbox Columns
/// 
/// @access private
/// @param {string} $element - Target element element.
/// @param {number} $width - Width of each columns.
///

@mixin even-flexbox($element, $columns, $gutter, $width) {
    // If margin is 0, width is not needed, so instead make columns auto fill.
    $width: if($gutter != 0, 0 1 $width, 1);

    @include flex-parent(row, space-between, wrap);

    > #{$element} {
        min-height: 1px;
        @include flex-child($width);
        @content;
    }
}

/// 
/// Float Columns
/// 
/// @access private
/// @param {string} $element - Target element element.
/// @param {number} $columns - Number of columns to produce.
/// @param {number} $width - Width of each columns.
/// @param {number} $gutter - Margin between columns.
/// @param {string} $side - Float side.
/// @param {string} $overflow - Overflow, hidden or auto?
///

@mixin even-float($element, $columns, $gutter, $side, $width, $overflow) {
    @include clearfix($overflow);

    > #{$element} {
        float: $side;
        min-height: 1px;
        width: $width;;

        &:not(:nth-child(#{$columns + 'n'})) {
            margin-#{opposite-side($side)}: $gutter;
        }

        @content;
    }
}

/// 
/// Asymmetrical Flexbox Elements
/// 
/// odd-columns provides irregularly-sized floated columns side by side. This
/// allows for an asymmetrical structure.
/// 
/// @access private
/// @param {string} $element - Target child element.
/// @param {list} $columns - List of columns to produce.
///

@mixin odd-flexbox($element, $columns, $gutter) {
    @if $gutter != 0 {
        $columns: set-autocol-sizes($columns, $gutter);
    }

    @include flex-parent(row, space-between);

    > #{$element} {
        min-height: 1px;

        @for $i from 1 through length($columns) {
            &:nth-child(#{$i}) {
                // Size is just "flex: 1" if margins are zeroand the column is auto.
                $width: if(nth($columns, $i) != auto, 0 1 nth($columns, $i), 1);

                @include flex-child($width);
                @content;
            }
        }
    }
}

/// 
/// Asymmetrical Floated Elements
/// 
/// @access private
/// @param {string} $element - Target child element.
/// @param {list} $columns - List of columns to produce.
/// @param {number} $gutter - Margin between columns.
/// @param {string} $side - Float side.
/// @param {string} $overflow - Overflow, hidden or auto?
///

@mixin odd-float($element, $columns, $gutter, $side, $overflow) {
    $columns: set-autocol-sizes($columns, $gutter);
    @include clearfix($overflow);

    > #{$element} {
        float: $side;
        min-height: 1px;

        @for $i from 1 through length($columns) {
            &:nth-child(#{$i}) {
                @if $i < length($columns) and strip-unit($gutter) != 0 {
                    margin-#{opposite-side($side)}: $gutter;
                }

                // Floated columns do not enjoy the benefit of auto sizes.
                width: nth($columns, $i);
                @content;
            }
        }
    }
}
