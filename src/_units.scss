/// 
/// Default Unit Multipliers
/// 
/// Used when you convert decimal to any of the given units. Add more as you wish!
/// See here for more information on comparitive multipliers:
/// 
/// @link https://www.bhalash.com/archives/13544803803
///

$default-multipliers: (
    px: 10,
    rem: 0.625,
    em: 0.625
) !default;

/// 
/// Check if List
/// 
/// @param {string} $list - Candidate unit.
/// @return {bool} - Is list, true/false.
///

@function is-list($list) {
    @return type-of($list) == 'list';
}

/// 
/// Validate Units
/// 
/// Build evaluation from units to types.
/// 
/// @link http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/
///

@function is-number($number) {
    @return type-of($number) == 'number';
}

@function is-keyword($number, $keywords: auto initial inherit 0) {
    @return index($keywords, $number) != null;
}

@function is-unit-type($number, $type) {
    @return is-number($number) and unit($number) == $type;
}

@function is-valid-unit($number) {
    @return (is-number($number) or (not is-number($number) and is-keyword($number)));
}

/// 
/// Unit Check Shorthand
/// 
/// @param {string} $number - Candidate unit.
/// @return {bool} - Unit is $type, true false.
///

@function is-decimal($number) {
    @return is-number($number) and unitless($number);
}

@function is-percent($number) {
    @return is-number($number) and is-unit-type($number, '%');
}

@function is-px($number) {
    @return is-number($number) and is-unit-type($number, 'px');
}

@function is-vh($number) {
    @return is-number($number) and is-unit-type($number, 'vh');
}

@function is-vw($number) {
    @return is-number($number) and is-unit-type($number, 'vw');
}

@function is-em($number) {
    @return is-number($number) and is-unit-type($number, 'em');
}

@function is-rem($number) {
    @return is-number($number) and is-unit-type($number, 'rem');
}

/// 
/// Strip Number Unit
/// 
/// @link https://css-tricks.com/snippets/sass/strip-unit-function/
/// @link https://github.com/sass/sass/issues/533
/// @param {number} $number - Number with unit.
/// @return {number} $number - Number without unit.
///

@function strip-unit($number) {
    @return $number / ($number * 0 + 1);
}

/// 
/// Convert Decimal Unit to Given Output Unit
/// 
/// Take in a given decimal multiplier (1.2, 2.3, etc) and return it in the given
/// output unit. Currently I support any one of: rem, em, and px, because my
/// focus is on screen appearance. The W3C themselves discourage the use of units
/// except rem, em, px, vw, vh, vmin and vmax for screens:
/// 
/// @link http://www.w3.org/Style/Examples/007/units.en.html#units
///

@function from-decimal($values, $type: null, $multipliers: $default-multipliers) {
    $units: ();
    $multiplier: '';

    @if not map-has-key($multipliers, $type) {
        @error "Target unit should be one of rem, em or px.";
    }

    $multiplier: map-get($multipliers, $type);

    @each $value in $values {
        @if not unitless($value) {
            @error "Invalid value - property should be a unitless decimal.";
        }

        // Do not attach units to a 0 value. Looks ugly.
        $units: append($units, if($value != 0, $value * $multiplier + $type, $value));
    }

    @return $units;
}

/// 
/// Decimal Unit to rem
/// 
/// @param {string} $values - Input decimal values (0.3, 1.7, etc);
/// @return {number} - The given unit as an rem value.
///

@function rem($values) {
    @return from-decimal($values, rem);
}

/// 
/// Decimal Unit to rem
/// 
/// @param {string} $values - input decimal values (0.3, 1.7, etc);
/// @return {number} - The given unit as an rem value.
///

@function em($values) {
    @return from-decimal($values, em);
}

/// 
/// Decimal Unit to px
/// 
/// @param {string} $values - Input decimal values (0.3, 1.7, etc);
/// @return {number} - The given unit as a px value.
///

@function px($values) {
    @return from-decimal($values, px);
}

/// 
/// Convert Values to REM Units
/// 
/// General property/value mixin and specific rem mixins for line-height and
/// font-size. Useful for IE8-9, which lacks complete REM support.
///

@mixin rem($property, $values) {
    @if is-number($values) and $values == 0 {
        // Prevents a value of 0 having a unit appended.
        #{$property}: $values;
    } @else {
        #{$property}: px($values);
        #{$property}: rem($values);
    }
}

@mixin font-size($value: 1) {
    @include rem(font-size, $value);
}

@mixin line-height($value: 1) {
    @include rem(line-height, $value);
}
