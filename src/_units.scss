/// 
/// Strip units from number.
/// 
/// @since 1.0.0
/// @access public
/// @link https://css-tricks.com/snippets/sass/strip-unit-function/
/// @link https://github.com/sass/sass/issues/533
/// @param {number} $number - Number with unit.
/// @return {number} $number - Number without unit.
///

@function strip-unit($number) {
  @return $number / ($number * 0 + 1);
}

///
/// Validate value as a number.
///
/// @example
///         
///     .foo {
///         @if is-number(1509) {
///             content: 'Is number!';
///         @else {
///             content: 'Not number!';
///         }
///     }
///
/// @since 1.0.0
/// @access public
/// @param {*} $value - Candidate value.
/// @return {bool} - Unit is a number, true/false.
///

@function is-number($value) {
  @return type-of($value) == 'number';
}


///
/// Validate value keyword is one of 'auto, initial, inherit, 0' default/reset
/// values.
///
/// @example
///         
///     .foo {
///         @if is-default-word(auto) {
///             content: 'Is default word!';
///         @else {
///             content: 'Not default word!';
///         }
///     }
///
/// @since 4.0.9
/// @access public
/// @param {*} $value - Candidate value.
/// @return {bool} - Unit is a 'default' keyword, true/false.
///

@function is-default-word($value, $keywords: auto initial inherit 0) {
  @return index($keywords, $value) != null;
}

///
/// Validate value as being a number of a given type.
///
/// @example
///         
///     .foo {
///         @if is-unit-type(1509px, 'px') {
///             content: 'Is number of pixel!';
///         @else {
///             content: 'Not number of pixel!';
///         }
///     }
///
/// @since 4.0.9
/// @access public
/// @param {*} $value - Candidate value.
/// @return {bool} - Unit is a numberof given type, true/false.
///

@function is-unit-type($number, $type) {
  @return is-number($number) and unit($number) == $type;
}

@function is-valid-unit($value) {
  @return (is-number($value) or (not is-number($value) and is-default-word($value)));
}

@function is-list($list) {
  @return type-of($list) == 'list';
}

@function is-decimal($number) {
  @return is-number($number) and unitless($number);
}

@function is-percent($number) {
  @return is-number($number) and is-unit-type($number, '%');
}

@function is-px($number) {
  @return is-number($number) and is-unit-type($number, 'px');
}

@function is-vh($number) {
  @return is-number($number) and is-unit-type($number, 'vh');
}

@function is-vw($number) {
  @return is-number($number) and is-unit-type($number, 'vw');
}

@function is-em($number) {
  @return is-number($number) and is-unit-type($number, 'em');
}

@function is-rem($number) {
  @return is-number($number) and is-unit-type($number, 'rem');
}
