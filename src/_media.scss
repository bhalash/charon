/// 
/// Media Query Terms
///
/// Internal list of @media keywords used to compose queries from shorthand
/// queries.
/// 
/// @access private
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries
///

$_charon-media-terms: (
  mod: (
    'only', 'not'
  ),
  media: (
    // Non-deprecated media query devices.
    'all', 'aural', 'braille', 'handheld', 'print', 'projection', 'screen', 'tty', 'tv', 'embossed'
  ),
  property: (
    // Non-browser-prefixed @media features.
    'height', 'width', 'device-width', 'device-height', 'aspect-ratio', 'color', 'color-index', 'monochrome', 'resolution', 'scan', 'grid', 'orientation'
  ),
  prefix: (
    // Valid prefix mods.
    'min', 'max'
  ),
  prefixed: (
    // @media featured with a min/max prefix.
    'height', 'width', 'device-width', 'device-height', 'aspect-ratio', 'color', 'color-index', 'monochrome', 'resolution'
  ),
  noval: (
    'monochrome'
  )
) !default;

/// 
/// Parse Number Range for Presets
/// 
/// @access public
/// @param {number} $min - Range minimum size.
/// @param {number} $max - Range maximum size.
/// @param {string} $property - Range property.
/// @return {string} Parsed media query range condition.
///

@function size-range($min, $max, $property: 'device-width') {
  @return 'only screen and (min-#{$property}: #{$min}) and (max-#{$property}: #{$max})';
}

/// 
/// Internal map of media queries presets
/// @access private
///

$_charon-media-map: (
example: 'only screen and (max-width: 300px) and (min-height: 100vh)',
watch: size-range(218px, 281px),
smartphone: size-range(320px, 667px),
tablet: size-range(600px, 1280px)
);

/// 
/// Add to Template Presets
/// 
/// @access private
/// @param {map} $map - Map of presets to add.
/// @return {map} $_charon-media-map - Library media preset.
///

@function add-media-presets($map) {
  $_charon-media-map: map-merge($_charon-media-map, $map) !global;
  @return $_charon-media-map;
}

/// 
/// Test if a given property is a preset-is the key present in the internal map
/// of stored media queries?
/// 
/// @param {string} $condition - Property to test.
/// @return {bool} Property is a preset, true/false.
///

@function _is-preset($condition) {
  @return map-has-key($_charon-media-map, $condition);
}

/// 
/// Get preset from the internal map of media queries.
/// 
/// @param {string} $property - Property to fetch.
/// @param {string} - Preset property.
///

@function _get-preset($condition) {
  @return map-get($_charon-media-map, $condition);
}

/// 
/// Test if a given property is a pithy shorthand media query.
/// 
/// @param {string} $property - Property to test.
/// @return {bool} - Property is shorthand/true false.
///

@function _is-media-shorthand($property) {
  @return length($property) == 1 and not _is-preset($property);
}

/// 
/// Expand a shorthand media query into one recognizable and usable by the 
/// browser, e.g.:
///
/// 'landscape' => 'only screen and (orientation: landscape)'
/// 'progressive' => 'only tv and (scan: progressive)'
/// 
/// @access private
/// @param {string} $property - Property to test.
/// @return {string} $shorthand - Expanded media shorthand term.
///

@function _media-shorthand($property) {
  $shorthand: '';
  $property: nth($property, 1);

  @if $property == landscape or $property == portrait {
    // orientation: landscape/portrait
    $shorthand: 'only screen and (orientation: #{$property})';
  } @else if $property == progressive or $property == interlace {
    // scan: progressive/interlace
    $shorthand: 'only tv and (scan: #{$property})';
  } @else if $property == monochrome {
    // monochrome
    $shorthand: 'all and (#{$property})';
  } @else if index(map-get($_charon-media-terms, media), $property) != null {
    $shorthand: $property;
  }

  @return $shorthand;
}

/// 
/// Test if a property is prefixed.
/// 
/// @param {string} $property - Property to test for prefixedness.
/// @return {bool} - Property is prefixed, true/false.
///

@function _has-prefix($property) {
  @return index(map-get($_charon-media-terms, prefixed), $property) != false;
}

/// 
/// Split up an entered shorthand media query into relevant fragments to be 
/// glued into a browser-acceptable media query.
///
/// @access private
/// @param {list} $condition - Media condition to split.
/// @return {map} $split - Split up condition.
///

@function _split-condition($condition) {
  $split: ();

  @each $term in $condition {
    @if index(map-get($_charon-media-terms, media), $term) != null {
      // @media type: screen, print, etc.
      $split: map-merge($split, (media: $term));
    } @else if index(map-get($_charon-media-terms, mod), $term) != null {
      // Media modifier term: not or and.
      $split: map-merge($split, (mod: $term));
    } @else if index(map-get($_charon-media-terms, prefix), $term) != null {
      // @media property prefix: min or max.
      $split: map-merge($split, (prefix: $term));
    } @else if index(map-get($_charon-media-terms, property), $term) != null {
      // @media property: color, width, height, etc.
      $split: map-merge($split, (property: $term));
    } @else {
      // @media property value: 300px, 10rem, etc.
      $split: map-merge($split, (value: $term));
    }
  }

  @if not map-has-key($split, property) {
    @error "Media condition '#{$condition}' is missing a media query property (e.g. min-width, height)!";
  }

  @if not map-has-key($split, mod) {
    // Add modifier if it wasn't added.
    $split: map-merge($split, (mod: only));
  }

  @if not map-has-key($split, media) {
    // Test for missing property.
    $split: map-merge($split, (media: screen));
  }

  @if not map-has-key($split, prefix) {
    // Test for missing prefix.
    $split: map-merge($split, (prefix: ''));
  }

  @if not map-has-key($split, value) and property-has-value(map-get($split, property)) {
    // Test for missing value, if property has value.
    @error "Media condition '#{$condition}' is missing a media query value (e.g., 300px, 10rem)!";
  }

  @return $split;
}

/// 
/// Internal method to expand shorthand media condition:
/// 
///     'width max 300px' => 'only screen and (max-width: 300px)'
///
/// Examples:
///
///     screen width 300px
///     not screen width min 200px
///     not screen min width 200px
/// 
/// @access private
/// @param {map} $condition - Media query condition to be parsed.
/// @return {string} $condition - Parsed condition appended to query.
///

@function _parse-condition($condition) {
  $split: _split-condition($condition);

  $media: map-get($split, media);
  $mod: map-get($split, mod);
  $prefix: map-get($split, prefix);
  $property: map-get($split, property);
  $value: map-get($split, value);

  @if property-has-value($property) {
    @if _has-prefix($property) and $prefix {
      $prefix: '#{$prefix}-';
    } @else {
      $prefix: '';
    }

    $property: '(#{$prefix}#{$property}: #{$value})';
  } @else {
    $property: '(#{$property})';
  }

  $condition: '#{$mod} #{$media} and #{$property}';

  @return $condition;
}

/// 
/// CSS @media Query Function
/// 
/// Order of resolution:
/// 
/// 1. User-added presets.
/// 2. Existing shorthand rules.
/// 3. All other arbitrary queries.
/// 
/// @access public
/// @param {list} $condition - Query conditions(s);
/// @return {string} $condition - Parsed media query.
///

@function query($condition) {
  @if _is-preset($condition) {
    $condition: _get-preset($condition);
  } @else if _is-media-shorthand($condition) {
    $condition: _media-shorthand($condition);
  } @else {
    $condition: _parse-condition($condition);
  }

  @return $condition;
}

/// 
/// Main entry point for the library. Conditions are passed to query() to parse.
/// 
/// @access public
/// @param {list} $queries - Query conditions.
///

@mixin media($conditions...) {
  // , == OR -|- and == AND
  $bool: ',';
  $query: '';

  @for $i from 1 through length($conditions) {
    $condition: nth($conditions, $i);

    @if $i > 1 {
      $query: '#{$query}#{$bool} ';
    }

    $query: '#{$query} #{query($condition)}';
  }

  @media #{$query} {
    @content;
  }
}

/// 
/// Retina Pixel Density Screen
/// 
/// @access public
/// @param {number} $density - Pixel density.
/// @link https://css-tricks.com/snippets/css/retina-display-media-query/
///

@mixin density($density) {
  @media
  screen and (-webkit-min-device-pixel-ratio: $density),
  screen and (min--moz-device-pixel-ratio: $density),
  screen and (-o-min-device-pixel-ratio: $density/1),
  screen and (min-device-pixel-ratio: $density),
  screen and (min-resolution: #{$density * 96} + dpi),
  screen and (min-resolution: #{$density} + dppx) {
    @content;
  }
}

/// 
/// Internet Explorer
/// 
/// I am happy to exclude Internet Explorer 11 because it is decently good. My
/// IE problems increase exponentially as I work backwards in time.
/// 
/// @link http://keithclark.co.uk/articles/moving-ie-specific-css-into-media-blocks/
/// @link http://keithclark.co.uk/articles/moving-ie-specific-css-into-media-blocks/media-tests/
/// @link http://www.limecanvas.com/css-hacks-targeting-ie-10/
/// @link http://www.paulirish.com/2009/browser-specific-css-hacks/
/// 
/// DO NOT USE THIS.
/// 
/// Wait...what? It's a bad idea to mix conditional IE CSS and regular CSS. It's
/// here if you need it, but ask yourself first: should I really do this?
///
/// @access public
/// @param {number} $version - Internet Explorer version to target (in range 6-10).
///

@mixin ie($version: 10) {
  $version: abs($version);

  @if $version == 6 {
    $version: 'screen\9';
  } @else if $version == 7 {
    $version: '\0screen\,screen\9';
  } @else if $version == 8 {
    $version: '\0screen';
  } @else if $version == 9 {
    // Targets IE 8, 9, 10.
    $version: 'screen\0';
  } @else if $version == 10 {
    $version: 'screen and (min-width:0\0)';
  }

  @media #{$version} {
    @content;
  }
}
