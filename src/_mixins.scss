/// 
/// Flexible Square Boxes
/// 
/// Generate a box whose height is equal to the given ratio of the width.
/// Width can be of any size. Ratio can be any value between 0 and $foo.
/// 
/// Any unit, fixed or percentage, is acceptable.
///
/// @example scss - fluid-square function.
///
///     @include fluid-square(50px 1); =>
///     
///     height: 0;
///     padding-top: 50px;
///     width: 50px;
///
/// @example scss - fluid-square function.
///
///     @include fluid-square(100% 0.75); =>
///
///     height: 0;
///     padding-bottom: 75%;
///     width: 100%;
/// 
/// @access public
/// @link http://stackoverflow.com/a/13625843/1433400
/// @param {map} $size - Horizontal width and height ratio.
///

@mixin fluid-square($size: 100% 1) {
    $width: nth($size, 1);
    $ratio: strip-unit(nth($size, 2)) * $width;

    height: 0;
    padding-bottom: $ratio;
    width: $width;
}

/// 
/// Automatically vendor prefixes to CSS properties. You should use autoprefixer!
/// 
/// @param {string} $attribute - CSS attribute to be prefixed.
/// @param {string} $value - CSS value.
/// @param {map} $prefixes - Map of prefixes to be applied.
///

@mixin prefix($attribute, $value, $prefixes: webkit) {
    @each $prefix in $prefixes {
        #{'-' + $prefix + '-' + $attribute}: $value;
    }

    #{$attribute}: #{$value};
}

/// 
/// Automatically vendor prefixes to CSS values. You should use autoprefixer!
/// 
/// @param {string} $attribute - CSS attribute.
/// @param {string} $value - CSS value to be prefixed.
/// @param {map} $prefixes - Map of prefixes to be applied.
///

@mixin prefix-value($attribute, $value, $prefixes: webkit) {
    @each $prefix in $prefixes {
        #{$attribute}: #{'-' + $prefix + '-' + $value};
    }

    #{$attribute}: #{$value};
}

/// 
///  Freeze <div> Content
///

@mixin freeze {
    overflow: hidden;
    z-index: -1;
    @include fixed(0);
}

/// 
/// Vertical Center
/// 
/// @param {number} $amount - Amount of top and bottom padding.
///

@mixin vertical-center($amount) {
    padding-bottom: $amount;
    padding-top: $amount;
}

/// 
/// Invert RGBA
/// 
/// @param {number} $red - Red value.
/// @param {number} $green - Green value.
/// @param {number} $blue - Blue value.
/// @param {number} $alpha - Alpha value.
/// @return {map} - Inverted RGBA.
///

@function rgba-opposite($red: 255, $green: 255, $blue: 255, $alpha: 0) {
    @return rgba(255 - $red, 255 - $green, 255 - $blue, 1 - $alpha);
}

/// 
/// Placeholder Styles
/// 
/// Generate styles for input placeholders in Internet Explorer, Firefox and
/// Webkit browsers. Use as follows:
/// 
///      input {
///          @include placeholder-style {
///              foo: bar;
///          }
///      }
///

@mixin placeholder-style {
    &::-webkit-input-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
        opacity: 1;
    }

    &::-moz-placeholder {
        @content;
        opacity: 1;
    }

    &:-ms-input-placeholder {
        @content;
    }
}

/// 
/// Background Coloured Mask
/// 
/// Useful for when you have to layer text above a background image.
///

%background-mask {
    position: relative;

    > * {
        // Specific workaround for Mobile Safari: without this #interior content
        // will scroll behind the header.
        -webkit-backface-visibility: hidden;
        // Child content must be raised owing to the background gradient.
        z-index: 2;
    }

    &:after {
        content: ' ';
        @include absolute(0);
    }
}

/// 
/// Solid Background Mask
/// 
/// @param {number} $red - Red value.
/// @param {number} $green - Green value.
/// @param {number} $blue - Blue value.
/// @param {number} $alpha - Alpha value.
///

@mixin solid-mask($red: 255, $green: 255, $blue: 255, $alpha: 1) {
    @extend %background-mask;

    &:after {
        background-color: rgba($red, $green, $blue, $alpha);
    }
}

/// 
/// Column Count
///

@mixin column-count($count: 3, $gap: null, $rule: null) {
    column-count: $count;

    @if $gap {
        column-gap: $gap;
    }

    @if $rule {
        column-rule: $rule;
    }
}

/// 
/// Modal Popover
///

@mixin pop-modal {
    display: none;
    @include fixed(0);

    &:target {
        display: block;
        outline: 0;
        z-index: 4;
    }
}

/// 
/// Gradient Background Mask
/// 
/// @param {map} $start - Gradient start color and opacity.
/// @param {map} $end - Gradient end color and opacity.
///

@mixin gradient-mask($start: rgba(0,0,0,0.75), $end: rgba(0,0,0,0.25)) {
    @extend %background-mask;

    &:after {
        background: linear-gradient(to bottom, $start 0%, $end 100%);
    }
}

/// 
/// CSS Counter
/// 
/// @param {string} $counter - Name of the counter.
/// @param {string} $element - Target element.
/// @param {string} $before - String preceding counter;
/// @param {string} $after - String anteceding counter;
///

@mixin counter($counter, $element, $before: null, $after: null) {
    counter-reset: $counter;

    & #{$element}:before {
        counter-increment: $counter;
        content: "#{$before}" counter($counter) "#{$after}";
    }
}
