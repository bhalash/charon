/// 
/// Flexible Square Boxes
/// 
/// Generate a box whose height is equal to the given ratio of the width.
/// Width can be of any size. Ratio can be any value between 0 and $foo.
/// 
/// Any unit, fixed or percentage, is acceptable.
///
/// @example scss - fluid-square function.
///
///     @include fluid-square(50px 1); =>
///     
///     height: 0;
///     padding-top: 50px;
///     width: 50px;
///
/// @example scss - fluid-square function.
///
///     @include fluid-square(100% 0.75); =>
///
///     height: 0;
///     padding-bottom: 75%;
///     width: 100%;
/// 
/// @since 1.0.0
/// @access public
/// @link http://stackoverflow.com/a/13625843/1433400
/// @param {map} $size - Horizontal width and height ratio.
///

@mixin fluid-square($size: 100% 1) {
  $width: nth($size, 1);
  $ratio: strip-unit(nth($size, 2)) * $width;

  height: 0;
  padding-bottom: $ratio;
  width: $width;
}

/// 
/// Automatically vendor prefixes to CSS properties. You should use autoprefixer!
/// 
/// @since 1.0.0
/// @access public
/// @param {string} $attribute - CSS attribute to be prefixed.
/// @param {string} $value - CSS value.
/// @param {map} $prefixes - Map of prefixes to be applied.
///

@mixin prefix($attribute, $value, $prefixes: webkit) {
  @each $prefix in $prefixes {
    #{"-" + $prefix + "-" + $attribute}: $value;
  }

  #{$attribute}: #{$value};
}

/// 
/// Automatically vendor prefixes to CSS values. You should use autoprefixer!
/// 
/// @since 1.0.0
/// @access public
/// @param {string} $attribute - CSS attribute.
/// @param {string} $value - CSS value to be prefixed.
/// @param {map} $prefixes - Map of prefixes to be applied.
///

@mixin prefix-value($attribute, $value, $prefixes: webkit) {
  @each $prefix in $prefixes {
    #{$attribute}: #{"-" + $prefix + "-" + $value};
  }

  #{$attribute}: #{$value};
}

/// 
///  Freeze <div> Content
/// 
/// @since 1.0.0
/// @access public
///

@mixin freeze {
  overflow: hidden;
  z-index: -1;
  @include fixed(0);
}

/// 
/// Placeholder Styles
/// 
/// Generate styles for input placeholders in Internet Explorer, Firefox and
/// Webkit browsers.
/// 
/// @example scss
///
///   input.foo {
///     @include placeholder-style {
///       color: red;
///     }
///   }
/// 
/// @since 1.0.0
/// @access public
///

@mixin placeholder-style {
  &::-webkit-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
    opacity: 1;
  }

  &::-moz-placeholder {
    @content;
    opacity: 1;
  }

  &:-ms-input-placeholder {
    @content;
  }
}

/// 
/// Background colored mask. Useful for when you have to layer text above a
/// background image.
/// 
/// @since 1.0.0
/// @access public
///

%background-mask {
  position: relative;

  > * {
    // Specific workaround for Mobile Safari: without this #interior content
    // will scroll behind the header.
    -webkit-backface-visibility: hidden;
    // Child content must be raised owing to the background gradient.
    z-index: 2;
  }

  &:after {
    content: ' ';
    @include absolute(0);
  }
}

/// 
/// Solid Background Mask
/// 
/// @param {number} $red - Red value.
/// @param {number} $green - Green value.
/// @param {number} $blue - Blue value.
/// @param {number} $alpha - Alpha value.
/// 
/// @since 1.0.0
/// @access public
///

@mixin solid-mask($red: 255, $green: 255, $blue: 255, $alpha: 1) {
  @extend %background-mask;

  &:after {
    background-color: rgba($red, $green, $blue, $alpha);
  }
}

/// 
/// Column Count
/// 
/// @since 1.0.0
/// @access public
///

@mixin column-count($count: 3, $gap: null, $rule: null) {
  column-count: $count;

  @if $gap {
    column-gap: $gap;
  }

  @if $rule {
    column-rule: $rule;
  }
}

/// 
/// Modal Popover
/// 
/// @since 1.0.0
/// @access public
///

@mixin pop-modal {
  display: none;

  @include fixed(0);

  &:target {
    display: block;
    outline: 0;
    z-index: 4;
  }
}

/// 
/// Gradient Background Mask
/// 
/// @since 1.0.0
/// @access public
/// @param {map} $start - Gradient start color and opacity.
/// @param {map} $end - Gradient end color and opacity.
///

@mixin gradient-mask($start: rgba(0, 0, 0, 0.75), $end: rgba(0, 0, 0, 0.25)) {
  @extend %background-mask;

  &:after {
    background: linear-gradient(to bottom, $start 0%, $end 100%);
  }
}

/// 
/// CSS Counter
/// 
/// @since 1.0.0
/// @access public
/// @param {string} $counter - Name of the counter.
/// @param {string} $element - Target element.
/// @param {string} $before - String preceding counter;
/// @param {string} $after - String anteceding counter;
///

@mixin counter($counter, $element, $before: null, $after: null) {
  counter-reset: $counter;

  & #{$element}:before {
    counter-increment: $counter;
    content: "#{$before}" counter($counter) "#{$after}";
  }
}

/// 
/// Clearfix
/// 
/// Bulletproof and Rock-Solid self-clearing float. You can tell it is both
/// Bulletproof and Rock-Solid since I capitalized the words. There are very rare
/// instances were I might need to use a clearing element (such as splitting
/// floating elements vertically).
/// 
/// @since 1.0.0
/// @access public
/// @param {string} $overflow - Type of overflow, auto/hidden.
/// @param {bool} $important - Mark overflow type as important.
///

@mixin clearfix($overflow: auto, $important: false) {
  $overflow: if($overflow != auto, hidden, $overflow);

  overflow: unquote("#{$overflow}#{if($important, !important, "")}");

  &:after {
    clear: both;
    content: '';
    display: table;
  }
}

/// 
/// Remove Float
/// 
/// Absolutely, positively remove a float from an element and reset its width to
/// the default value. There are occasions, tied to scope, where you may have to
/// force this with !important.
/// 
/// @since 1.0.0
/// @access public
/// @param {bool} $important - Mark clear as important.
///

@mixin nofloat($important: false) {
  float: none #{if($important, !important, "")};
  width: initial #{if($important, !important, "")};
}

/// 
/// Flexbox Parent
/// 
/// If you have come this far you should have an understanding of how, why and
/// where you would use flexbox. These mixins generate unprefixed CSS flexbox
/// rules.
/// 
/// Two safe defaults are assumes for flex-direction and flex, but otherwise I
/// leave browser defaults be.
/// 
/// @since 1.0.0
/// @access public
/// @link https://css-tricks.com/snippets/css/a-guide-to-flexbox/
/// @link http://zomigi.com/blog/flexbox-syntax-for-ie-10/
/// @link http://flexiejs.com/
/// @param {string} $direction - Direction of flexbox: Column or row.
/// @param {string} $justify-content - Alignment of content along main axis.
/// @param {string} $wrap - Whether or not to wrap content.
/// @param {string} $align-items - Alignment of content along secondary axis.
///

@mixin flex-parent($direction: row, $justify: null, $wrap: null, $align: null) {
  display: flex;
  flex-direction: $direction;

  @if $justify {
    justify-content: $justify;
  }

  @if $wrap {
    flex-wrap: $wrap;
  }

  @if $align {
    align-items: $align;
  }
}

/// 
/// Flexbox Child
/// 
/// @since 1.0.0
/// @access public
/// @param {list} $flex - Default flex arguments.
/// @param {string} $align-self - Self-alignment position.
/// @param {number} $order - Order for self in flex parent.
///

@mixin flex-child($flex: 1, $align-self: null, $order: null) {
  flex: $flex;

  @if $align-self {
    align-self: $align-self;
  }

  @if $order {
    order: $order;
  }
}
