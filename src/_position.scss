/// 
/// Set Position of Fixed, Absolute or Relative Items
/// 
/// I wanted a slightly different operation for my position mixin: To be able to
/// use in a manner identical to margin or padding side shorthand:
/// 
/// @example scss
/// 
///    margin: 10px 20px 5px;
///    @include absolute(10px 20px 5px);
/// 
/// @example scss Output content.
/// 
///    position: absolute;
///    top: 10px;
///    left: 20px;
///    right: 20px;
///    bottom: 5px;
/// 
/// If values are unitless and greater than zero, it will assume they decimal
/// values and generate rem dimensions.
/// 
/// @since 1.0.0
/// @access public
/// @link http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/
/// @link http://hugogiraudel.com/2013/08/05/offsets-sass-mixin/
/// @param {string} $position - Type of position (absolute, fixed, relative, sticky).
/// @param {map} $positions - Values to be applied (50% 3px 20vg).
/// @param {map} $offsets - Sides for values (top left bottom right).
///

@mixin position($position, $positions, $offsets: null) {
  position: $position;

  @if not $offsets {
    // 1. Default offsets list.
    $offsets: top right bottom left;

    @if length($positions) == 1 {
      @for $i from 1 to 4 {
        // 1 or 4 positions. If only one side input, duplicate it for the other sides.
        $positions: append($positions, nth($positions, 1));
      }
    } @else if length($positions) == 2 {
      // 2 positions. Duplicate each value if two items provided.
      $offsets: top left bottom right;
      $positions: append($positions, nth($positions, 1));
      $positions: append($positions, nth($positions, 2));
    } @else if length($positions) == 3 {
      // 3 positions. Add extra side if three positions provided.
      $offsets: top left bottom right;
      $positions: append($positions, nth($positions, 2));
    }
  } @else {
    @if length($positions) != length($offsets) {
      @error 'The number of offset properties and offset positions must be equal.';
    }
  }

  @each $offset in $offsets {
    $side: index($offsets, $offset);
    $value: nth($positions, $side);

    @if not is-valid-unit($value) {
      @error "#{$side} is not a valid unit for this mixin.";
    }

    #{$offset}: $value;
  }
}

///
/// Absolutely position an element.
/// 
/// @example
///   
///   .foo {
///     @include absolute(50% auto 10px auto);
///   }
///   
///   .bar {
///     @include absolute(50% 20%, left top);
///   }
///
/// @since 1.0.0
/// @access public
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/position
/// @link https://developer.mozilla.org/en/docs/Web/CSS/margin
/// @param {list} $positions - List of units for offsets (50% 25% auto 10px).
/// @param {list=} $offsets - List of offsets (top left bottom right).
///

@mixin absolute($positions, $offsets: null) {
  @include position(absolute, $positions, $offsets);
}

///
/// Fix the position of an element on screen.
/// 
/// @example scss
///   
///   .foo {
///     @include fixed(50% auto 10px auto);
///   }
///   
///   .bar {
///     @include fixed(50% 20%, left top);
///   }
///
/// @since 1.0.0
/// @access public
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/position
/// @link https://developer.mozilla.org/en/docs/Web/CSS/margin
/// @param {list} $positions - List of units for offsets (50% 25% auto 10px).
/// @param {list=} $offsets - List of offsets (top left bottom right).
///

@mixin fixed($positions, $offsets: null) {
  @include position(fixed, $positions, $offsets);
}

///
/// Relatively position an element.
/// 
/// @example scss
///   
///   .foo {
///     @include relative(50% auto 10px auto);
///   }
///   
///   .bar {
///     @include relative(50% 20%, left top);
///   }
///
/// @since 1.0.0
/// @access public
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/position
/// @link https://developer.mozilla.org/en/docs/Web/CSS/margin
/// @param {list} $positions - List of units for offsets (50% 25% auto 10px).
/// @param {list=} $offsets - List of offsets (top left bottom right).
///

@mixin relative($positions, $offsets: null) {
  @include position(relative, $positions, $offsets);
}

///
/// Stickily position an element.
/// 
/// @example scss
///   
///   .foo {
///     @include sticky(50% auto 10px auto);
///   }
///   
///   .bar {
///     @include sticky(50% 20%, left top);
///   }
///
/// @since 1.0.0
/// @access public
/// @link https://developer.mozilla.org/en-US/docs/Web/CSS/position
/// @link https://developer.mozilla.org/en/docs/Web/CSS/margin
/// @param {list} $positions - List of units for offsets (50% 25% auto 10px).
/// @param {list=} $offsets - List of offsets (top left bottom right).
///

@mixin sticky($positions, $offsets: null) {
  @include position(sticky, $positions, $offsets);
}

/// 
/// Absolutely position an element in the center.
/// 
/// @since 1.0.0
/// @access public
///

@mixin absolute-center {
  @include absolute(50% auto auto 50%);
  transform: translate(-50%, -50%);
}

/// 
/// Vertically center a block element using top and bottom padding.
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $amount - Amount of top and bottom padding.
///

@mixin vertical-center($amount) {
  padding-bottom: $amount;
  padding-top: $amount;
}
