/**
 * Manage Colour Variables
 */

/**
 * Default Size Colors
 * -----------------------------------------------------------------------------
 * Default grey (I use gray because "grey" highlights annoyingly) came from a
 * simple rounded scale. Formula:
 *
 * 255 / 7 = 36.4 = 36
 * 255 - (36 * {1-7}) = 219, 183, etc.
 *
 * If you keep the structure, you can merge in your own colors as follows:
 *
 * $my-theme-colors: (..);
 * $default-colors: map-merge($default-colors, $my-theme-colors);

 * @link http://erskinedesign.com/blog/friendlier-color-names-sass-maps/
 */

$charon-color-map: (
    blacks: (
        x-dark: #000000,
        dark: #121212,
        mid-dark: #242424,
        base: #373737,
        mid-light: #494949,
        light: #5b5b5b,
        x-light: #6d6d6d
    ),
    whites: (
        x-dark: #939393,
        dark: #a5a5a5,
        mid-dark: #b7b7b7,
        base: #c8c8c8,
        mid-light: #dcdcdc,
        light: #ededed,
        x-light: #ffffff
    ),
) !default;

/**
 * Add Color Palettes
 * -----------------------------------------------------------------------------
 * @param   map         $map                    Map of colors to add.
 * @return  map         $charon-color-map       New color.
 */

@function add-color($map) {
    $charon-color-map: map-merge($charon-color-map, $map) !global;
    @return $charon-color-map;
}

/**
 * Output Colors in BEM Style
 * -----------------------------------------------------------------------------
 * @param   string      $property           Property to use.
 * @param   list        $colors             List of colours to output.
 * @param   list        $tones              List of tones of the color to use.
 */

@mixin bem-color-classes($property: 'color', $colors: null, $tones: null) {
    $colors: if($colors, $colors, map-keys($charon-color-map));

    @each $color in $colors {
        &--#{$color} {
            $color: map-get($charon-color-map, $color);
            $tones: if($tones, $tones, map-keys($color));

            @each $tone in $tones {
                &--#{$tone} {
                    #{$property}: map-get($color, $tone);
                }
            }
        }
    }
}

/**
 * Fetch from Color Palette
 * -----------------------------------------------------------------------------
 * In short, the post advocates a mapped color of colors and tones using a
 * set schema, and then using this function to return the colors.
 *
 *      $_color-base-gray: rgb(229,231,234);
 *
 *      $colors: (
 *          purple: (
 *              base: rgb(42,40,80),
 *              light: rgb(51,46,140),
 *              dark: rgb(40,38,65)
 *             ),
 *          gray: (
 *              base: $_color-base-gray,
 *              light: lighten($_color-base-gray, 10%),
 *              dark: darken($_color-base-gray, 10%)
 *          )
 *      );
 *
 * @param   string      $color          Color to be used from map.
 * @param   string      $tone           Default tone to be used.
 * @param   map         $color        Palette of colors.
 * @return  string                      Color chen from map.
 *
 * @link http://erskinedesign.com/blog/friendlier-color-names-sass-maps/
 */

@function color($color, $tone: 'base') {
    @return map-get(map-get($charon-color-map, $color), $tone);
}
