/// 
/// Sqaure Root
/// 
/// @since 1.0.0
/// @access public
/// @link http://www.antimath.info/css/sass-sqrt-function/
/// @param {number} $number
/// @return {number} $sqrt - Sqaure root of $number.
///

@function sqrt($number) {
  $temp: 1;
  $sqrt: 1;

  @for $i from 1 through 10 {
    $sqrt: $temp - ($temp * $temp - abs($number)) / (2 * $temp);
    $temp: $sqrt;
  }

  @return $sqrt;
}

/// 
/// Exponential Number
/// 
/// Raise a {number} to a given power.
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $number - Number to riase.
/// @param nubmer $power - Power to which it should be raised.
/// @return {number} $exponent - Number raised to exponent.
///

@function power($number, $power) {
  $exponent: 1;

  @if $power > 0 {
    @for $i from 1 through $power {
      $exponent: $exponent * $number;
    }
  } @else if $power < 0 {
    @for $i from 1 through $power {
      $exponent: $exponent / $number;
    }
  }

  @return $exponent;
}

/// 
/// Exponential Number
/// 
/// Raise a {number} to an exponent of 10. So:
/// 
/// raise(3,2) = 3 x 10^2 = 300
/// raise(4,1) = 4 x 10^1 = 40
/// raise(2.75,3) = 2.75 x 10*3 = 2750
/// 
/// Sass only rounds to 5 digits of percision, so don't try to use the
/// gravitational constant as a font size. :)
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $number - Number to riase.
/// @param nubmer $power - Power to which it should be raised.
/// @return {number} $exponent - Number raised to exponent.
///

@function raise-ten($number, $power) {
  @return $number * power(10, $power);
}

/// 
/// Square Number
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $number
/// @return {number} $number - Number squared.
///

@function square($number) {
  @return $number * $number;
}

/// 
/// Hexagon Height
/// 
/// Return the height of a hexagon from the length of one side. This is not
/// entirely precise because of Sass' rounding.
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $side - Hexagon side.
/// @return {number} $number - Approximate height of the hexagon.
///

@function hex-height($side) {
  @return $side * sqrt(3);
}

/// 
/// Hexagon Width
/// 
/// Return the width of a hexagon from the length of one side.
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $side - Hexagon side.
/// @return {number} $number - Approximate width of the hexagon.
///

@function hex-width($side) {
  @return $side * 2;
}

/// 
/// Length of Hypotenuse of Pythagorean Triangle
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $opposite - Opposite side of triangle.
/// @param {number} $adjacent - Adjacent side of a triangle.
/// @return {number} - Length of the hypotenuse;
///

@function hypotenuse-length($opposite, $adjacent) {
  @return sqrt(square($opposite) + square($adjacent));
}

/// 
/// Generate Hexagon Shape
/// 
/// Width is input, height is calculated. It will be a little less than the
/// width. Inspired by the link below.
/// 
/// This should work great back to ~IE9.
/// 
/// @since 1.0.0
/// @access public
/// @param {map} $colors - Colors to be used. Rest, hover and active.
/// @param {number} $width - Width of the hexagon.
/// @link https://jtauber.github.io/articles/css-hexagon.html
///

@mixin hexagon($colors, $size--width) {
  @if unit($size--width) == '%' {
    // CSS border elements may not use a percentage as its width unit.
    // Hexagon will be malformed if you use a percentage.
    // *Anything* else is acceptable.
    @warn "Percentage #{$ize--width} was used for hexagon width.";
    @warn "Hexagon will be malformed";
  }

  // Rest, hover, active.
  $color--rest: nth($colors, 1);

  // Any measurable unit but percentage is okay!
  $size--width: if(unitless($size--width), to-rem($size--width), $size--width);

  // Sides and height of the hexagon.
  $size--side: $size--width * 0.5;
  $size--height: hex-height($size--side);

  $border--height: $size--height * 0.5;
  $border--width: $size--side * 0.5;

  & {
    // Constrain the background color inside the padding.
    background-clip: content-box;
    display: inline-block;
    height: $size--height;
    padding: 0 $size--side * 0.5;
    position: relative;
    width: $size--side;

    // Center color.
    background-color: $color--rest;
    // :before and :after inherit this.
    border-color: $color--rest;

    &:before, &:after {
      border-color: transparent;
      border-style: solid;
      content: '';
      width: 0;
    }

    @if length($colors) >= 2 {
      $color--hover: nth($colors, 2);

      &:hover {
        background-color: $color--hover;
        border-color: $color--hover;
      }
    }

    @if length($colors) >= 3 {
      $color--active: nth($colors, 3);

      &:active {
        background-color: $color--active;
        border-color: $color--active;
      }
    }

    &:before {
      // Left.
      border-right-color: inherit;
      border-width: $border--height $border--width $border--height 0;
      @include absolute(0 auto 0 0);
    }

    &:after {
      // Right.
      border-left-color: inherit;
      border-width: $border--height 0 $border--height $border--width;
      @include absolute(0 0 0 auto);
    }
  }
}
