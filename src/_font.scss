/// 
/// CSS @font-face Declaration
/// 
/// There are a bunch of Sass/Scss @font-face mixins available on the Internet,
/// but each of them is fundamentally inflexible. They variously:
/// 
/// 1. Require a fixed file path.
/// 2. Fixed existence of files, by which I mean each and every possible type of
///    file (eot, woff, etc).
/// 3. Fixed order of declaration.
/// 
/// With font-face, I hopefully have provided something a little bit more
/// flexible: declare all of the attributes of your @font-face in a map, and then
/// call the font-face mixin.
/// 
/// Weight, stretch and style are all optional.
/// 
/// @example scss
/// 
///   @include font-face((
///       family: 'font-name',
///       path: '/path/to/folder/',
///       filename: 'FontName',
///       formats: ('ttf', 'woff', 'eot'),
///       // Optional attributes for the font face:
///       weight: 'normal',
///       style: 'normal',
///       stretch: 'condensed'
///   ));
/// 
/// @since 1.0.0
/// @access public
/// @param {map} $font - Map of typeface information.
///

@mixin font($font) {
  $family: map-get($font, family);
  $path: map-get($font, path);
  $file: map-get($font, filename);
  $formats: map-get($font, formats);
  $src: '';

  $path: '#{$path}#{$file}.';

  @font-face {
    @for $i from 1 through length($formats) {
      @if $i > 1 {
        $src: $src + ', ';
      }

      $src: '#{$src}#{_font-src($path, nth($formats, $i))}';
    }

    font-family: map-get($font, family);
    src: #{$src};

    // Optionally override CSS text defaults:

    @if map-has-key($font, weight) {
      font-weight: map-get($font, weight);
    }

    @if map-has-key($font, style) {
      font-style: map-get($font, style);
    }

    @if map-has-key($font, stretch) {
      font-stretch: map-get($font, stretch);
    }

    @content;
  }
}

/// 
/// Expand @font-face Format
///
/// @since 1.0.0
/// @access private
/// @param {string} $format - @font-face format.
/// @return {string} $format - Expanded @font-face format.
///

@function _font-format($format) {
  @if $format == 'eot' {
    $format: 'embedded-opentype';
  } @else if $format == 'ttf' {
    $format: 'truetype';
  }

  @return $format;
}

/// 
/// Parse @font-face Asset URL String
/// 
/// @since 1.0.0
/// @access private
/// @param {string} $path - Path to asset.
/// @param {string} $exension - Asset extension.
/// @return {string} $src - Parsed asset URL.
///

@function _font-src($path, $extension) {
  $format: _font-format($extension);
  $src: 'url(#{$path}#{$extension}) format(#{$format})';
  @return $src;
}

/// 
/// Modular Scale Values
/// 
/// Either increase (increment > 0) or decrease (increment <= 0) $base-size by
/// $ratio through the given {number} of $increment units.
/// 
/// @since 1.0.0
/// @access public
/// @link https://www.bhalash.com/archives/13544805638
/// @link http://www.modularscale.com/
/// @link http://sassmeister.com/gist/22918b6519a2f15354d0
/// @param {number} $step - Ratio step to return.
/// @param {number} $base-size - Base size of unit to raise.
/// @param {number} $ratio - Ratio of increment/decrement.
/// @return {number} $size - Increment/decremented size.
///

@function modular-scale($step, $base-size, $ratio) {
  @for $i from 1 through $step {
    @if $step > 0 {
      $base-size: $base-size * $ratio;
    } @else {
      $base-size: $base-size / $ratio;
    }
  }

  @return $base-size;
}

/// 
/// Golden Ratio Modular Scale Step
/// 
/// @since 1.0.0
/// @access public
/// @param {number} $step - Ratio step to return.
/// @param {number} $base-size - Base size of unit to raise.
/// @return {number} $step - Increment step per the golden ratio.
///

@function gstep($step, $base-size) {
  @return modular-scale($step, $base-size, 1.61803398875);
}
