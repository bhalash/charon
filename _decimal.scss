/**
 * Decimal Units
 * -----------------------------------------------------------------------------
 * @category   Stylesheet
 * @package    Scss Helpers
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    1.0
 * @link       https://github.com/bhalash/scss-helpers
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Default Unit Multipliers
 * -----------------------------------------------------------------------------
 * Used when you convert decimal to any of the given units. Add more as you wish!
 * See here for more information on comparitive multipliers:
 * 
 * @link https://www.bhalash.com/archives/13544803803
 */

$default-multipliers: (
    px: 10, 
    rem: 0.625,
    em: 0.625
) !default;

/**
 * Check if List
 * -----------------------------------------------------------------------------
 * @param   string      $list           Candidate unit.
 * @return  bool        Is list, true/false.
 */

@function is-list($list) {
    @return type-of($list) == 'list';
}

/**
 * Validate Units
 * -----------------------------------------------------------------------------
 * Build evaluation from units to types. 
 *
 * @link    http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/
 */

@function is-number($number) {
    @return type-of($number) == 'number';
}

@function is-keyword($number, $keywords: auto initial inherit 0) {
    @return index($keywords, $number) != null;
}

@function is-unit-type($number, $type) {
    @return is-number($number) and unit($number) == $type;
}

@function is-valid-unit($number) {
    @return (is-number($number) or (not is-number($number) and is-keyword($number)));
}

/**
 * Unit Check Shorthand
 * -----------------------------------------------------------------------------
 * @param   string      $number       Canidate unit.
 * @return  bool        Unit is $type, true false.
 */

@function is-decimal($number) {
    @return is-number($number) and unitless($number);
}

@function is-percent($number) {
    @return is-number($number) and is-unit-type($number, '%');
}

@function is-px($number) {
    @return is-number($number) and is-unit-type($number, 'px');
}

@function is-vh($number) {
    @return is-number($number) and is-unit-type($number, 'vh');
}

@function is-vw($number) {
    @return is-number($number) and is-unit-type($number, 'vw');
}

@function is-em($number) {
    @return is-number($number) and is-unit-type($number, 'em');
}

@function is-rem($number) {
    @return is-number($number) and is-unit-type($number, 'rem');
}

/**
 * Strip Number Unit
 * -----------------------------------------------------------------------------
 * @param   int     $number         Number with unit.
 * @return  int     $number         Number without unit.
 * @link https://css-tricks.com/snippets/sass/strip-unit-function/
 */

@function strip-unit($number) {
    @if is-number($number) and not unitless($number) {
        $number: $number / ($number * 0 + 1);
    }

    @return $number;
}

/**
 * Convert Decimal Unit to Given Output Unit
 * -----------------------------------------------------------------------------
 * Take in a given decimal multiplier (1.2, 2.3, etc) and return it in the given
 * output unit. Currently I support any one of: rem, em, and px, because my 
 * focus is on screen appearance. The W3C themselves discourage the use of units
 * except rem, em, px, vw, vh, vmin and vmax for screens:
 * 
 * @link http://www.w3.org/Style/Examples/007/units.en.html#units
 */

@function from-decimal($values, $type: null, $multipliers: $default-multipliers) {
    $units: ();
    $multiplier: '';

    @if not map-has-key($multipliers, $type) {
        @error "Invalid type: Type should be one of rem, em or px.";
    }

    $multiplier: map-get($multipliers, $type);

    @each $value in $values {
        @if not unitless($value) {
            @error "Invalid value: Property should be a unitless decimal.";
        }

        // Do not attach units to a 0 value. Looks ugly.
        $units: append($units, if($value != 0, $value * $multiplier + $type, $value));
    }

    @return $units;
}

/**
 * Decimal Unit to rem
 * -----------------------------------------------------------------------------
 * @param   string  $values             Input decimal values (0.3, 1.7, etc);
 * @return  int                         The given unit as an rem value.
 */

@function rem($values) {
    @return from-decimal($values, rem);
}

/**
 * Decimal Unit to rem
 * -----------------------------------------------------------------------------
 * @param   string  $values             input decimal values (0.3, 1.7, etc);
 * @return  int                         The given unit as an rem value.
 */

@function em($values) {
    @return from-decimal($values, em);
}

/**
 * Decimal Unit to px
 * -----------------------------------------------------------------------------
 * @param   string  $values             Input decimal values (0.3, 1.7, etc);
 * @return  int                         The given unit as a px value.
 */

@function px($values) {
    @return from-decimal($values, px);
}

/**
 * rem Mixins 
 * -----------------------------------------------------------------------------
 * General property/value mixin and specific rem mixins for line-height and 
 * font-size.
 */

@mixin rem($property, $values) {
    @if is-number($values) and $values == 0 {
        // Prevents a value of 0 having a unit appended.
        #{$property}: $values;
    } @else {
        #{$property}: px($values);
        #{$property}: rem($values);
    }
}

@mixin font-size($value: 1) {
    // font-value in rem with px fallback.
    @include rem(font-size, $value);
}

@mixin line-height($value: 1) {
    // line-height in rem with px fallback.
    @include rem(line-height, $value);
}

/**
 * Decimal Margin and Padding
 * -----------------------------------------------------------------------------
 * These two don't do too much except make life easier: Set margin or padding as
 * a multiplier of the base margin and padding. The side can be appended through
 * an optional operator. If you do set a side, every margin or padding except 
 * the first passed will be silently discarded.
 * 
 * @param   string      $attribute      Attribute to set sizes for.
 * @param   list        $values         Values, either singlar or plural.
 * @param   list        $sides          Sides (top, left, etc.).
 */

@mixin box-size($attribute, $values, $sides: null) {
    @if $sides {
        @if length($values) > 1 {
            // Discard all values but the first if explicit sides are provided.
            $values: nth($values, 1);
        }

        @each $side in $sides {
            @include rem(#{$attribute + '-' + $side}, $values);
        }
    } @else {
        @include rem(#{$attribute}, $values);
    }
}

@mixin margin($margin, $side: null) {
    @include box-size(margin, $margin, $side);
}

@mixin padding($padding, $side: null) {
    @include box-size(padding, $padding, $side);
}

@mixin width($width, $sides: null) {
    @include box-size(width, $width);
} 

@mixin height($height, $sides: null) {
    @include box-size(height, $height);
} 

/**
 * Quickly Set Width and Height
 * -----------------------------------------------------------------------------
 * @param   list        $sizes          Width and height sizes.
 */

@mixin size($sizes...) {
    $sizes: if(length($sizes) == 1, nth($sizes, 1), $sizes);

    $width: nth($sizes, 1);
    $height: nth($sizes, 2);

    @if is-decimal($width) {
        @include width($width);
    } @else {
        width: $width;
    }

    @if is-decimal($height) {
        @include height($height);
    } @else {
        height: $height;
    }
}
