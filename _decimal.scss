/**
 * Decimal Units
 * -----------------------------------------------------------------------------
 * @category   Stylesheet
 * @package    Scss Helpers
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    2.0
 * @link       https://github.com/bhalash/scss-helpers
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Convert Decimal Unit to Given Output Unit
 * -----------------------------------------------------------------------------
 * Take in a given decimal multiplier (1.2, 2.3, etc) and return it in the given
 * output unit. Currently I support any one of: rem, em, and px, because my 
 * focus is on screen appearance. The W3C themselves discourage the use of units
 * except rem, em, px, vw, vh, vmin and vmax for screens:
 * 
 * @link http://www.w3.org/Style/Examples/007/units.en.html#units
 */

@function from-decimal($values, $type: null, $multipliers: $default-multipliers) {
    $units: ();
    $multiplier: '';

    @if (not map-has-key($multipliers, $type)) {
        @warn "`#{$type}` is an invalid type: Type should be one of rem, em or px.";
    } @else {
        $multiplier: map-get($multipliers, $type);
    }

    @each $value in $values {
        @if (not unitless($value)) {
            @warn "`#{$value}` is an invalid value: Property should be a unitless decimal.";
        } @else {
            $units: append($units, $value * $multiplier + $type);
        }
    }

    @return $units;
}

/**
 * Decimal Unit to rem
 * -----------------------------------------------------------------------------
 * @param   string  $values             Input decimal values (0.3, 1.7, etc);
 * @return  int                         The given unit as an rem value.
 */

@function rem($values) {
    @return from-decimal($values, rem);
}

/**
 * Decimal Unit to rem
 * -----------------------------------------------------------------------------
 * @param   string  $values             input decimal values (0.3, 1.7, etc);
 * @return  int                         The given unit as an rem value.
 */

@function em($values) {
    @return from-decimal($values, em);
}

/**
 * Decimal Unit to px
 * -----------------------------------------------------------------------------
 * @param   string  $values             Input decimal values (0.3, 1.7, etc);
 * @return  int                         The given unit as a px value.
 */

@function px($values) {
    @return from-decimal($values, px);
}

/**
 * rem Mixins 
 * -----------------------------------------------------------------------------
 * General property/value mixin and specific rem mixins for line-height and 
 * font-size.
 */

@mixin rem($property, $values) {
    #{$property}: px($values);
    #{$property}: rem($values);
}

@mixin font-size($value: 1) {
    // font-value in rem with px fallback.
    font-size: px($value);
    font-size: rem($value);
}

@mixin line-height($value: 1) {
    // line-height in rem with px fallback.
    line-height: px($value);
    line-height: rem($value);
}

/**
 * Decimal Margin and Padding
 * -----------------------------------------------------------------------------
 * These two don't do too much except make life easier: Set margin or padding as
 * a multiplier of the base margin and padding. The side can be appended through
 * an optional operator. If you do set a side, every margin or padding except 
 * the first passed will be silently discarded.
 * 
 * @param   string      $attribute      Atrt
 */

@mixin box-size($attribute, $values, $sides: null) {
    @if ($sides) {
        @if(length($values) > 1) {
            // Discard all values but the first if explicit sides are provided.
            $values: nth($values, 1);
        }

        @each $side in $sides {
            #{$attribute + '-' + $side}: px($values);
            #{$attribute + '-' + $side}: rem($values);
        }
    } @else {
        #{$attribute}: px($values);
        #{$attribute}: rem($values);
    }
}

@mixin margin($margin, $side: null) {
    @include box-size(margin, $margin, $side);
}

@mixin padding($padding, $side: null) {
    @include box-size(padding, $padding, $side);
}

@mixin width($width, $sides: null) {
    @include box-size(width, $width);
} 

@mixin height($height, $sides: null) {
    @include box-size(height, $height);
} 

/**
 * Quickly Set Padding and Height
 * -----------------------------------------------------------------------------
 */

@mixin size($sizes) {
    @if (length($sizes) < 2) {
        @warn 'Two values should be passed to this mixin!';
    } @else {
        $width: nth($sizes, 1);
        $height: nth($sizes, 2);

        @if (is-decimal($width)) {
            @include width($width);
        } @else {
            width: $width;
        }

        @if (is-decimal($height)) {
            @include height($height);
        } @else {
            height: $height;
        }
    }
}
