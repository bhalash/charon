/**
 * Columnar Container Rules
 * -----------------------------------------------------------------------------
 * Flexbox and float column mixins. 
 * 
 * @category   Stylesheet
 * @package    Scss Helpers
 * @author     Mark Grealish <mark@bhalash.com>
 * @copyright  Copyright (c) 2015, Mark Grealish
 * @license    http://opensource.org/licenses/MIT The MIT License (MIT)
 * @version    1.0
 * @link       https://github.com/bhalash/scss-helpers
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

/**
 * Flexbox Parent
 * -----------------------------------------------------------------------------
 * If you have come this far you should have an understanding of how, why and 
 * where you would use flexbox. These mixins generate unprefixed CSS flexbox
 * rules, with a fallback generated for IE8 for use through Flexie.
 * 
 * Two safe defaults are assumes for flex-direction and flex, but otherwise I 
 * leave browser defaults be.
 *
 * @param   string      $direction          Direction of flexbox. Column or row.
 * @param   string      $justify-content    Alignment of content along main axis.
 * @param   string      $wrap               Whether or not to wrap content.
 * @param   string      $align-items        Alignment of content along secondary axis.
 * @link    https://css-tricks.com/snippets/css/a-guide-to-flexbox/
 * @link    http://zomigi.com/blog/flexbox-syntax-for-ie-10/
 * @link    http://flexiejs.com/
 */

@mixin flex-parent($direction: row, $justify: null, $wrap: null, $align: null) {
    display: flex;

    flex-direction: $direction;

    @if $justify {
        justify-content: $justify;
    }

    @if $wrap {
        flex-wrap: $wrap;
    }

    @if $align {
        align-items: $align;
    }
}

/**
 * Flexbox Child
 * -----------------------------------------------------------------------------
 * @param   list      $flex         Default flex arguments.
 * @param   string    $align-self   Self-alignment position.
 * @param   int       $order        Order for self in flex parent.
 */

@mixin flex-child($flex: 1, $align-self: null, $order: null) {
    flex: $flex;

    @if $align-self {
        align-self: $align-self;
    }

    @if $order {
        order: $order;
    }
}

/**
 * Symmetric Column Width
 * -----------------------------------------------------------------------------
 * Determine the width of each column in a syemmetrical element. 
 * 
 * @param   int     $columns        Number of columns.
 * @param   int     $gutter         Percentage space between columns.
 * @return  int     Calculated column width.
 */

@function column-width($columns, $gutter) {
    $width: (100 - ($columns - 1) * $gutter) / $columns;

    @if not is-percent($width) {
        $width: percentage($width * 0.01);
    }

    @return $width;
}

/**
 * Symmetric Column Margin
 * -----------------------------------------------------------------------------
 * Determine the width of each column in a syemmetrical element. 
 * 
 * @param   int     $gutter         Margin as a decimal or percentage.
 * @param   int     $gutter         Margin as a percentage.
 */

@function column-margin($gutter) {
    @if $gutter != 0 {
        @if $gutter != 0 and is-decimal($gutter) {
            $gutter: percentage(strip-unit($gutter) * 0.01);
        } @else if not is-percent($gutter) {
            @error 'Margin should be supplied as a decimal or a percentage!';
        }
    }

    @return $gutter;
}

/**
 * Asymmetric Column Width
 * -----------------------------------------------------------------------------
 * Determine the width of "auto" columns in asyemmetrical element.
 * 
 * @param   list    $columns        List of columns.
 * @param   int     $gutter         Column margin.
 * @return  int     Percentage width of "auto" columns.
 */

@function odd-column-width($columns, $gutter) {
    $percent: 0;
    $autos: 0;

    @each $col in $columns {
        $percent: $percent + value-percent($col);

        @if is-keyword($col) {
            $autos: $autos + 1;
        }
    }

    @if $autos == 0 {
        // Division by zero is bad.
        $autos: 1;
    }

    /* Width for margin is subtracted from auto columns. In short:
     * % column total = % width + margin;
     * auto column total = % width - margin; */
    @return ((100 - $percent) / $autos) - (($gutter * (length($columns) - 1)) / $autos);
}

/**
 * Get Opposite Float Side
 * -----------------------------------------------------------------------------
 * Used in several places and surprisingly useful.
 * 
 * @param   string      $side         Float side;
 * @return  string      $opposite     Inverse of floated side;
 */

@function opposite-side($side: left) {
    @return if($side == right, left, right);
}

/**
 *  Evaluate Whether Number is Column
 * -----------------------------------------------------------------------------
 * If number is a percentage, return number, else return number 0.
 * 
 * @param   int     $value          Number to test.
 * @return  int     Number/0.
 */

@function value-percent($value) {
    @return if(is-percent($value), $value, 0);
}

/**
 * Total Percentages in List 
 * -----------------------------------------------------------------------------
 * The list for asymmetric float columns has a mix of percentage and "auto"
 * sized columns. This tallies the percentage columns and returns whether they
 * exceed 100%.
 */

@function list-greater-than($columns, $target: 100) {
    $percent: 0;

    @each $col in $columns {
        $percent: $percent + value-percent($col);
    }

    @return ($percent > $target);
}

/**
 * Validate Asymmetric Mixin Vars
 * -----------------------------------------------------------------------------
 * @param   list        $columns        List of columns.
 */

@function check-odd-columns($columns) {
    @if not is-list($columns) {
        @error 'Asymmetrical columns should be supplied a list!'; 
    }

    @each $col in $columns {
        @if not is-percent($col) and not is-keyword($col) {
            // Check for appropraite units.
            @error 'Supplied units should be either a percentage or \'auto!\'';
        }
    }

    @if list-greater-than($columns, 100) { 
        // Check for appropriate size.
        @error 'Column percentages should total < 100%!';
    }

    @return $columns;
}

/**
 * Validate Column Type
 * -----------------------------------------------------------------------------
 * 
 */

@function column-type($type) {
    @if $type != 'float' and $type != 'flex' {
        @error "Type must be either 'float' or 'flex'!"
    }

    @return $type;
}

/**
 * Set "Auto"-width Column Sizes
 * -----------------------------------------------------------------------------
 * @param   list        $columns        List of columns.
 * @param   int         $gutter         Margin size.
 */

@function set-autocol-sizes($columns, $gutter) {
    $auto-width: odd-column-width($columns, $gutter);

    @for $i from 1 through length($columns) {
        @if is-keyword(nth($columns, $i), auto) {
            $columns: set-nth($columns, $i, $auto-width);
        }
    }

    @return $columns;
}

/**
 * Clearfix
 * -----------------------------------------------------------------------------
 * Bulletproof and Rock-Solid self-clearing float. You can tell it is both
 * Bulletproof and Rock-Solid since I capitalized the words. There are very rare
 * instances were I might need to use a clearing element (such as splitting
 * floating elements vertically).
 */

@mixin clearfix($overflow: auto, $important: false) {
    overflow: $overflow#{if($important, !important, '')};

    &:after {
        clear: both;
        content: '';
        display: table;
    }
}

/**
 * Remove Float
 * -----------------------------------------------------------------------------
 */

@mixin nofloat($important: false) {
    float: none #{if($important, !important, '')};
    width: initial #{if($important, !important, '')};
    @content;
}

/**
 * Symmetric, Even Flexbox or Floated Columns
 * -----------------------------------------------------------------------------
 * @param   string      $type           Flexbox or float?
 * @param   string      $element        Target child element.
 * @param   int/list    $columns        Number of columns to produce.
 * @param   int         $gutter         Margin between columns. 
 * @param   string      $side           Float side.
 * @param   string      $overflow       Overflow, hidden or auto?
 */

@mixin columns($type: 'flex', $element: div, $columns: 3, $gutter: 0, $side: left, $overflow: auto) {
    // Validate margin.
    $gutter: column-margin($gutter); 
    $type: column-type($type);

    @if is-decimal($columns) and $columns > 0 {
        @include even-columns($type, $element, $columns, $gutter, $side, $overflow) {
            @content;
        }
    } @else if is-list($columns) {
        @include odd-columns($type, $element, $columns, $gutter, $side, $overflow) {
            @content;
        }
    } @else {
        @error 'Columns should be either a list or a a number';
    }
}

@mixin even-columns($type, $element, $columns, $gutter, $side, $overflow) {
    $width: column-width($columns, $gutter);

    @if $type == 'flex' {
        @include even-flexbox($element, $columns, $gutter, $width) {
            @content;
        }
    }
    
    @if $type == 'float' {
        @include even-float($element, $columns, $gutter, $side, $width, $overflow) {
            @content;
        }
    }
}

@mixin odd-columns($type, $element, $columns, $gutter, $side, $overflow) {
    // Validate columns, if list.
    $columns: check-odd-columns($columns);

    @if $type == 'flex' {
        @include odd-flexbox($element, $columns, $gutter) {
            @content;
        }
    }

    @if $type == 'float' {
        @include odd-float($element, $columns, $gutter, $side, $overflow) {
            @content;
        }
    }
}

/**
 * Flexbox Columns
 * -----------------------------------------------------------------------------
 * @param   string      $element        Target element element.
 * @param   int         $width          Width of each columns.
 */

@mixin even-flexbox($element, $columns, $gutter, $width) {
    @if $gutter != 0 {
        $width: 0 1 $width;
    } @else {
        // If margin is 0, width is not needed, so instead make columns auto fill.
        $width: 1;
    }

    @include flex-parent(row, space-between, wrap);

    > #{$element} {
        min-height: 1px;
        @include flex-child($width);
        @content;
    }
}

/**
 * Float Columns
 * -----------------------------------------------------------------------------
 * @param   string      $element        Target element element.
 * @param   int         $columns        Number of columns to produce.
 * @param   int         $width          Width of each columns.
 * @param   int         $gutter         Margin between columns. 
 * @param   string      $side           Float side.
 * @param   string      $overflow       Overflow, hidden or auto?
 */

@mixin even-float($element, $columns, $gutter, $side, $width, $overflow) {
    @include clearfix($overflow);

    > #{$element} {
        float: $side;
        min-height: 1px;
        width: $width;;

        &:not(:nth-child(#{$columns + 'n'})) {
            margin-#{opposite-side($side)}: $gutter;
        }

        @content;
    }
}

/**
 * Asymmetrical Columns
 * -----------------------------------------------------------------------------
 * odd-columns provides irregularly-sized floated columns side by side. This
 * allows for an asymmetrical structure.
 * 
 * DO NOT USE THIS IF YOU WANT REGULARLY-SIZED COLUMNS. USE columns INSTEAD.
 * 
 * Seriously -- do NOT use this mixin for regularly-spaced columns. Use
 * columns if you need regular columns, because the right margin will look
 * all fucked. This is *only* for asymmetric columns.
 *
 * Be careful with @content rules too -- I intend it to only be used for
 * responsive rules, as the output can be quite verbose.
 */

/**
 * Asymmetrical Flexbox Elements
 * -----------------------------------------------------------------------------
 * @param   string      $element        Target child element.
 * @param   list        $columns        List of columns to produce.
 */

@mixin odd-flexbox($element, $columns, $gutter) {
    @if $gutter != 0 {
        $columns: set-autocol-sizes($columns, $gutter);
    }

    @include flex-parent(row, space-between);

    > #{$element} {
        min-height: 1px;

        @for $i from 1 through length($columns) {
            &:nth-child(#{$i}) {
                // Size is just "flex: 1" if margins are zeroand the column is auto.
                $width: if(nth($columns, $i) != auto, 0 1 nth($columns, $i), 1);

                @include flex-child($width);
                @content;
            }
        }
    }
}

/**
 * Asymmetrical Floated Elements
 * -----------------------------------------------------------------------------
 * @param   string      $element        Target child element.
 * @param   list        $columns        List of columns to produce.
 * @param   int         $gutter         Margin between columns. 
 * @param   string      $side           Float side.
 * @param   string      $overflow       Overflow, hidden or auto?
 */

@mixin odd-float($element, $columns, $gutter, $side, $overflow) {
    $columns: set-autocol-sizes($columns, $gutter);
    @include clearfix($overflow);

    > #{$element} {
        float: $side;
        min-height: 1px;

        @for $i from 1 through length($columns) {
            &:nth-child(#{$i}) {
                @if $i < length($columns) and strip-unit($gutter) != 0 {
                    margin-#{opposite-side($side)}: $gutter;
                }

                // Floated columns do not enjoy the benefit of auto sizes.
                width: nth($columns, $i);
                @content;
            }
        }
    }
}
