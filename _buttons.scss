/**
 * Spritesheet
 * -----------------------------------------------------------------------------
 * Add your own map to this with add-sh-spritesheet().
 */

$sh-spritesheet: () !default;

/**
 * Recursive Map Get
 * -----------------------------------------------------------------------------
 * Wrapper under a different name for namespacing. 
 *
 * @param   map         $map        Map to search.
 * @param   list        $keys       Terms to search for wtihin the map.
 * @param   map                     Recursively-fetched results.
 */

@function sh-map-seek($map, $keys: default) {
    @return map-seek($map, $keys);
}

/**
 * Add Spritesheet to Spritesheet Map
 * -----------------------------------------------------------------------------
 * @param   string      $key                Associative key for added map.
 * @param   map         $map                Spritesheet map.
 * @return  map         $sh-spritesheet     Complete map of sprites.
 */

@function sh-add-spritesheet($key, $map) {
    $sh-spritesheet: map-merge($sh-spritesheet, ($key: $map)) !global;
    @return $sh-spritesheet;
}

/**
 * Access Spritesheet
 * -----------------------------------------------------------------------------
 * Return requested information about the spritesheet.
 *
 * @param   string      $command        Action to perform on spritesheet.
 * @param   string      $sheet          Sheet on which to perform action.
 * @param   map         $args           Any other args (size axis or sprite).
 * @param   map         $results        Requested information.
 */

@function sh-spritesheet($command, $sheet: null, $arg: null) {
    $results: ();

    @if $command == sprite {
        $results: sh-map-seek($sh-spritesheet, $sheet sprites $arg); 
    }

    @if $command == path {
        $results: sh-map-seek($sh-spritesheet, $sheet path);
    }

    @if $command == count {
        $results: length(sh-map-seek($sh-spritesheet, $sheet));
    }

    @if $command == dimensions {
        $results: sh-map-seek($sh-spritesheet, $sheet dimensions);
    }

    @return $results;
}

/**
 * Return Count of Sprites
 * -----------------------------------------------------------------------------
 * @param   string      $sheet          Target spritesheet.
 * @return  number                      Count of sprites in sheet.
 */

@function sh-count($sheet) {
    @return sh-spritesheet(count, $sheet);
}

/**
 * Return Spritesheet Path
 * -----------------------------------------------------------------------------
 * @param   string      $sheet          Target spritesheet.
 * @return  string                      Path to spritesheet.
 */

@function sh-path($sheet) {
    @return sh-spritesheet(path, $sheet);
}

/**
 * Return Spritesheet Dimensions
 * -----------------------------------------------------------------------------
 * @param   string      $sheet          Target spritesheet.
 * @param   string      $axis           Optional axis to return.
 * @return  number      $dimension      Spritesheet sh-dimension(s).
 */

@function sh-dimension($sheet, $axis: null) {
    $dimension: sh-spritesheet(dimensions, $sheet);

    @if $axis {
        @if $axis == x or $axis == y {
            $n: if($axis == x, 1, 2);
            $dimension: nth($dimension, $n);
        } @else {
            @error "Imaginary axis \"#{$axis}\" requested!"    
        }
    }

    @return $dimension;
}

/**
 * Get Sprite from Spritesheet
 * -----------------------------------------------------------------------------
 * @param   string      $sheet          Target spritesheet.
 * @param   string      $sprite         Sprite to fetch.
 * @return  map                         Sprite information.
 */

@function sh-get-sprite($sheet, $sprite) {
    @if length($sprite) > 1 {
        $sprite: nth($sprite, 1);
    }

    @return sh-spritesheet(sprite, $sheet, $sprite);
}

/**
 * Get Sprite Position
 * -----------------------------------------------------------------------------
 * Return X/Y CSS position of sprite as a percentage.
 *
 * @param   string      $sheet          Target spritesheet.
 * @param   string      $sprite         Sprite to fetch.
 * @return  map         $x $y           Percentage position of sprite.
 */

@function sh-sprite-position($sheet, $sprite) {

    $sprite: sh-get-sprite($sheet, $sprite);
    $sheet: sh-dimension($sheet);

    $sprite-x: nth($sprite, 1);
    $sprite-y: nth($sprite, 2);
    $sheet-x: nth($sheet, 1);
    $sheet-y: nth($sheet, 2);

    $x: percentage($sprite-x / ($sheet-x - 1));
    $y: percentage($sprite-y / ($sheet-y - 1));

    @return $x $y;
}

/**
 * Get Sprite Size
 * -----------------------------------------------------------------------------
 * Return W/H CSS size of sprite as a percentage.
 *
 * @param   string      $sheet          Target spritesheet.
 * @param   string      $sprite         Sprite to fetch.
 * @return  map         $x $y           Percentage size of sprite.
 */

@function sh-sprite-size($sheet, $sprite) {
    $sheet: sh-dimension($sheet);

    $x: percentage(nth($sheet, 1));
    $y: percentage(nth($sheet, 2));

    @return $x $y;
}

/**
 * Sprite Background Property
 * -----------------------------------------------------------------------------
 * @param   string      $sheet          Target spritesheet.
 * @param   string      $sprite         Sprite to fetch.
 * @return  map                         CSS background value for sprite.
 */

@function sprite($sheet, $sprite) {
    $position: sh-sprite-position($sheet, $sprite);
    $size: sh-sprite-size($sheet, $sprite);
    $path: url(sh-path($sheet));

    @return $position/$size no-repeat $path;
}

/**
 * Include Sprite Main Mixin
 * -----------------------------------------------------------------------------
 * Main entry point for this library. TL;DR: This makes a square(ish) sprite the 
 * centered background image of a square container. If either or both is square 
 * weird things will occur. WARE YE.
 * 
 * Square is good. All hail the squre. 
 *
 * @param   string      $sheet          Target spritesheet.
 * @param   string      $sprite         Sprite to fetch.
 */

@mixin sprite($sheet, $sprite, $selector) {
    &#{$selector} {
        background: sprite($sheet, $sprite);
    }

    @content;
}
